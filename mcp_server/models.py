# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:27:02+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccessDirection(Enum):
    inbound = 'inbound'
    outbound = 'outbound'


class AccessType(Enum):
    public = 'public'
    private = 'private'


class AccountLevelBpaSyncStatus(Enum):
    InSync = 'InSync'
    Failed = 'Failed'
    NeverSynced = 'NeverSynced'
    Defaulted = 'Defaulted'


class AccountSetupInProgressException(RootModel[Any]):
    root: Any


class AddOnType(Enum):
    AutoSnapshot = 'AutoSnapshot'
    StopInstanceOnIdle = 'StopInstanceOnIdle'


class AlarmState(Enum):
    OK = 'OK'
    ALARM = 'ALARM'
    INSUFFICIENT_DATA = 'INSUFFICIENT_DATA'


class AppCategory(Enum):
    LfR = 'LfR'


class AppCategoryList(RootModel[List[AppCategory]]):
    root: List[AppCategory]


class AutoMountStatus(Enum):
    Failed = 'Failed'
    Pending = 'Pending'
    Mounted = 'Mounted'
    NotMounted = 'NotMounted'


class AutoSnapshotDate(RootModel[constr(pattern=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')]):
    root: constr(pattern=r'^[0-9]{4}-[0-9]{2}-[0-9]{2}$')


class AutoSnapshotStatus(Enum):
    Success = 'Success'
    Failed = 'Failed'
    InProgress = 'InProgress'
    NotFound = 'NotFound'


class BPAStatusMessage(Enum):
    DEFAULTED_FOR_SLR_MISSING = 'DEFAULTED_FOR_SLR_MISSING'
    SYNC_ON_HOLD = 'SYNC_ON_HOLD'
    DEFAULTED_FOR_SLR_MISSING_ON_HOLD = 'DEFAULTED_FOR_SLR_MISSING_ON_HOLD'
    Unknown = 'Unknown'


class Base64(RootModel[str]):
    root: str


class BehaviorEnum(Enum):
    dont_cache = 'dont-cache'
    cache = 'cache'


class BlueprintType(Enum):
    os = 'os'
    app = 'app'


class BucketAccessLogPrefix(
    RootModel[constr(pattern=r'^[\w/!.*\')(-]+$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^[\w/!.*\')(-]+$', min_length=1, max_length=100)


class BucketMetricName(Enum):
    BucketSizeBytes = 'BucketSizeBytes'
    NumberOfObjects = 'NumberOfObjects'


class BucketName(
    RootModel[
        constr(
            pattern=r'^[a-z0-9][a-z0-9-]{1,52}[a-z0-9]$', min_length=3, max_length=54
        )
    ]
):
    root: constr(
        pattern=r'^[a-z0-9][a-z0-9-]{1,52}[a-z0-9]$', min_length=3, max_length=54
    )


class CacheBehavior(BaseModel):
    behavior: Optional[BehaviorEnum] = None


class CertificateDomainValidationStatus(Enum):
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    FAILED = 'FAILED'
    SUCCESS = 'SUCCESS'


class CertificateName(RootModel[str]):
    root: str


class CertificateStatus(Enum):
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    ISSUED = 'ISSUED'
    INACTIVE = 'INACTIVE'
    EXPIRED = 'EXPIRED'
    VALIDATION_TIMED_OUT = 'VALIDATION_TIMED_OUT'
    REVOKED = 'REVOKED'
    FAILED = 'FAILED'


class CertificateStatusList(RootModel[List[CertificateStatus]]):
    root: List[CertificateStatus]


class CloudFormationStackRecordSourceType(Enum):
    ExportSnapshotRecord = 'ExportSnapshotRecord'


class ComparisonOperator(Enum):
    GreaterThanOrEqualToThreshold = 'GreaterThanOrEqualToThreshold'
    GreaterThanThreshold = 'GreaterThanThreshold'
    LessThanThreshold = 'LessThanThreshold'
    LessThanOrEqualToThreshold = 'LessThanOrEqualToThreshold'


class ContactMethodStatus(Enum):
    PendingVerification = 'PendingVerification'
    Valid = 'Valid'
    Invalid = 'Invalid'


class ContactMethodVerificationProtocol(Enum):
    Email = 'Email'


class ContactProtocol(Enum):
    Email = 'Email'
    SMS = 'SMS'


class ContactProtocolsList(RootModel[List[ContactProtocol]]):
    root: List[ContactProtocol]


class ContainerLabel(
    RootModel[
        constr(
            pattern=r'^[a-z0-9]{1,2}|[a-z0-9][a-z0-9-]+[a-z0-9]$',
            min_length=1,
            max_length=53,
        )
    ]
):
    root: constr(
        pattern=r'^[a-z0-9]{1,2}|[a-z0-9][a-z0-9-]+[a-z0-9]$',
        min_length=1,
        max_length=53,
    )


class ContainerName(
    RootModel[
        constr(
            pattern=r'^[a-z0-9]{1,2}|[a-z0-9][a-z0-9-]+[a-z0-9]$',
            min_length=1,
            max_length=53,
        )
    ]
):
    root: constr(
        pattern=r'^[a-z0-9]{1,2}|[a-z0-9][a-z0-9-]+[a-z0-9]$',
        min_length=1,
        max_length=53,
    )


class ContainerServiceDeploymentState(Enum):
    ACTIVATING = 'ACTIVATING'
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'
    FAILED = 'FAILED'


class ContainerServiceMetricName(Enum):
    CPUUtilization = 'CPUUtilization'
    MemoryUtilization = 'MemoryUtilization'


class ContainerServiceName(
    RootModel[
        constr(
            pattern=r'^[a-z0-9]{1,2}|[a-z0-9][a-z0-9-]+[a-z0-9]$',
            min_length=1,
            max_length=63,
        )
    ]
):
    root: constr(
        pattern=r'^[a-z0-9]{1,2}|[a-z0-9][a-z0-9-]+[a-z0-9]$',
        min_length=1,
        max_length=63,
    )


class ContainerServicePowerName(Enum):
    nano = 'nano'
    micro = 'micro'
    small = 'small'
    medium = 'medium'
    large = 'large'
    xlarge = 'xlarge'


class ContainerServiceProtocol(Enum):
    HTTP = 'HTTP'
    HTTPS = 'HTTPS'
    TCP = 'TCP'
    UDP = 'UDP'


class ContainerServiceScale(RootModel[conint(ge=1, le=20)]):
    root: conint(ge=1, le=20)


class ContainerServiceState(Enum):
    PENDING = 'PENDING'
    READY = 'READY'
    RUNNING = 'RUNNING'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    DISABLED = 'DISABLED'
    DEPLOYING = 'DEPLOYING'


class ContainerServiceStateDetailCode(Enum):
    CREATING_SYSTEM_RESOURCES = 'CREATING_SYSTEM_RESOURCES'
    CREATING_NETWORK_INFRASTRUCTURE = 'CREATING_NETWORK_INFRASTRUCTURE'
    PROVISIONING_CERTIFICATE = 'PROVISIONING_CERTIFICATE'
    PROVISIONING_SERVICE = 'PROVISIONING_SERVICE'
    CREATING_DEPLOYMENT = 'CREATING_DEPLOYMENT'
    EVALUATING_HEALTH_CHECK = 'EVALUATING_HEALTH_CHECK'
    ACTIVATING_DEPLOYMENT = 'ACTIVATING_DEPLOYMENT'
    CERTIFICATE_LIMIT_EXCEEDED = 'CERTIFICATE_LIMIT_EXCEEDED'
    UNKNOWN_ERROR = 'UNKNOWN_ERROR'


class CreateBucketAccessKeyRequest(BaseModel):
    bucketName: BucketName


class CreateContainerServiceRegistryLoginRequest(BaseModel):
    pass


class Currency(Enum):
    USD = 'USD'


class DeleteCertificateRequest(BaseModel):
    certificateName: CertificateName


class DeleteContactMethodRequest(BaseModel):
    protocol: ContactProtocol


class DeleteContainerImageResult(BaseModel):
    pass


class DeleteContainerServiceRequest(BaseModel):
    serviceName: ContainerServiceName


class DeleteContainerServiceResult(BaseModel):
    pass


class DiskSnapshotState(Enum):
    pending = 'pending'
    completed = 'completed'
    error = 'error'
    unknown = 'unknown'


class DiskState(Enum):
    pending = 'pending'
    error = 'error'
    available = 'available'
    in_use = 'in-use'
    unknown = 'unknown'


class DistributionMetricName(Enum):
    Requests = 'Requests'
    BytesDownloaded = 'BytesDownloaded'
    BytesUploaded = 'BytesUploaded'
    TotalErrorRate = 'TotalErrorRate'
    Http4xxErrorRate = 'Http4xxErrorRate'
    Http5xxErrorRate = 'Http5xxErrorRate'


class DnsRecordCreationStateCode(Enum):
    SUCCEEDED = 'SUCCEEDED'
    STARTED = 'STARTED'
    FAILED = 'FAILED'


class DomainEntryOptionsKeys(RootModel[str]):
    root: str


class DomainEntryType(RootModel[str]):
    root: str


class DomainName(RootModel[str]):
    root: str


class DomainNameList(RootModel[List[DomainName]]):
    root: List[DomainName]


class DownloadDefaultKeyPairRequest(BaseModel):
    pass


class EligibleToRenew(RootModel[str]):
    root: str


class ExportSnapshotRecordSourceType(Enum):
    InstanceSnapshot = 'InstanceSnapshot'
    DiskSnapshot = 'DiskSnapshot'


class ForwardValues(Enum):
    none = 'none'
    allow_list = 'allow-list'
    all = 'all'


class GetBucketAccessKeysRequest(BaseModel):
    bucketName: BucketName


class GetContactMethodsRequest(BaseModel):
    protocols: Optional[ContactProtocolsList] = None


class GetContainerAPIMetadataRequest(BaseModel):
    pass


class GetContainerImagesRequest(BaseModel):
    serviceName: ContainerServiceName


class GetContainerServiceDeploymentsRequest(BaseModel):
    serviceName: ContainerServiceName


class GetContainerServicePowersRequest(BaseModel):
    pass


class GetContainerServicesRequest(BaseModel):
    serviceName: Optional[ContainerServiceName] = None


class GetDistributionBundlesRequest(BaseModel):
    pass


class GetDomainRequest(BaseModel):
    domainName: DomainName


class HeaderEnum(Enum):
    Accept = 'Accept'
    Accept_Charset = 'Accept-Charset'
    Accept_Datetime = 'Accept-Datetime'
    Accept_Encoding = 'Accept-Encoding'
    Accept_Language = 'Accept-Language'
    Authorization = 'Authorization'
    CloudFront_Forwarded_Proto = 'CloudFront-Forwarded-Proto'
    CloudFront_Is_Desktop_Viewer = 'CloudFront-Is-Desktop-Viewer'
    CloudFront_Is_Mobile_Viewer = 'CloudFront-Is-Mobile-Viewer'
    CloudFront_Is_SmartTV_Viewer = 'CloudFront-Is-SmartTV-Viewer'
    CloudFront_Is_Tablet_Viewer = 'CloudFront-Is-Tablet-Viewer'
    CloudFront_Viewer_Country = 'CloudFront-Viewer-Country'
    Host = 'Host'
    Origin = 'Origin'
    Referer = 'Referer'


class HeaderForwardList(RootModel[List[HeaderEnum]]):
    root: List[HeaderEnum]


class HeaderObject(BaseModel):
    headersAllowList: Optional[HeaderForwardList] = None
    option: Optional[ForwardValues] = None


class HttpEndpoint(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class HttpProtocolIpv6(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class HttpTokens(Enum):
    optional = 'optional'
    required = 'required'


class IAMAccessKeyId(RootModel[SecretStr]):
    root: SecretStr


class InUseResourceCount(RootModel[int]):
    root: int


class IncludeCertificateDetails(RootModel[bool]):
    root: bool


class InstanceAccessProtocol(Enum):
    ssh = 'ssh'
    rdp = 'rdp'


class InstanceHealthReason(Enum):
    Lb_RegistrationInProgress = 'Lb.RegistrationInProgress'
    Lb_InitialHealthChecking = 'Lb.InitialHealthChecking'
    Lb_InternalError = 'Lb.InternalError'
    Instance_ResponseCodeMismatch = 'Instance.ResponseCodeMismatch'
    Instance_Timeout = 'Instance.Timeout'
    Instance_FailedHealthChecks = 'Instance.FailedHealthChecks'
    Instance_NotRegistered = 'Instance.NotRegistered'
    Instance_NotInUse = 'Instance.NotInUse'
    Instance_DeregistrationInProgress = 'Instance.DeregistrationInProgress'
    Instance_InvalidState = 'Instance.InvalidState'
    Instance_IpUnusable = 'Instance.IpUnusable'


class InstanceHealthState(Enum):
    initial = 'initial'
    healthy = 'healthy'
    unhealthy = 'unhealthy'
    unused = 'unused'
    draining = 'draining'
    unavailable = 'unavailable'


class InstanceMetadataState(Enum):
    pending = 'pending'
    applied = 'applied'


class InstanceMetricName(Enum):
    CPUUtilization = 'CPUUtilization'
    NetworkIn = 'NetworkIn'
    NetworkOut = 'NetworkOut'
    StatusCheckFailed = 'StatusCheckFailed'
    StatusCheckFailed_Instance = 'StatusCheckFailed_Instance'
    StatusCheckFailed_System = 'StatusCheckFailed_System'
    BurstCapacityTime = 'BurstCapacityTime'
    BurstCapacityPercentage = 'BurstCapacityPercentage'
    MetadataNoToken = 'MetadataNoToken'


class InstancePlatform(Enum):
    LINUX_UNIX = 'LINUX_UNIX'
    WINDOWS = 'WINDOWS'


class InstancePlatformList(RootModel[List[InstancePlatform]]):
    root: List[InstancePlatform]


class InstanceSnapshotState(Enum):
    pending = 'pending'
    error = 'error'
    available = 'available'


class InvalidInputException(RootModel[Any]):
    root: Any


class IpAddress(RootModel[constr(pattern=r'([0-9]{1,3}\.){3}[0-9]{1,3}')]):
    root: constr(pattern=r'([0-9]{1,3}\.){3}[0-9]{1,3}')


class IpAddressType(Enum):
    dualstack = 'dualstack'
    ipv4 = 'ipv4'


class Ipv6Address(RootModel[constr(pattern=r'([A-F0-9]{1,4}:){7}[A-F0-9]{1,4}')]):
    root: constr(pattern=r'([A-F0-9]{1,4}:){7}[A-F0-9]{1,4}')


class Ipv6AddressList(RootModel[List[Ipv6Address]]):
    root: List[Ipv6Address]


class IsVpcPeeredRequest(BaseModel):
    pass


class IsoDate(RootModel[datetime]):
    root: datetime


class IssuerCA(RootModel[str]):
    root: str


class KeyAlgorithm(RootModel[str]):
    root: str


class LoadBalancerAttributeName(Enum):
    HealthCheckPath = 'HealthCheckPath'
    SessionStickinessEnabled = 'SessionStickinessEnabled'
    SessionStickiness_LB_CookieDurationSeconds = (
        'SessionStickiness_LB_CookieDurationSeconds'
    )
    HttpsRedirectionEnabled = 'HttpsRedirectionEnabled'
    TlsPolicyName = 'TlsPolicyName'


class LoadBalancerMetricName(Enum):
    ClientTLSNegotiationErrorCount = 'ClientTLSNegotiationErrorCount'
    HealthyHostCount = 'HealthyHostCount'
    UnhealthyHostCount = 'UnhealthyHostCount'
    HTTPCode_LB_4XX_Count = 'HTTPCode_LB_4XX_Count'
    HTTPCode_LB_5XX_Count = 'HTTPCode_LB_5XX_Count'
    HTTPCode_Instance_2XX_Count = 'HTTPCode_Instance_2XX_Count'
    HTTPCode_Instance_3XX_Count = 'HTTPCode_Instance_3XX_Count'
    HTTPCode_Instance_4XX_Count = 'HTTPCode_Instance_4XX_Count'
    HTTPCode_Instance_5XX_Count = 'HTTPCode_Instance_5XX_Count'
    InstanceResponseTime = 'InstanceResponseTime'
    RejectedConnectionCount = 'RejectedConnectionCount'
    RequestCount = 'RequestCount'


class LoadBalancerProtocol(Enum):
    HTTP_HTTPS = 'HTTP_HTTPS'
    HTTP = 'HTTP'


class LoadBalancerState(Enum):
    active = 'active'
    provisioning = 'provisioning'
    active_impaired = 'active_impaired'
    failed = 'failed'
    unknown = 'unknown'


class LoadBalancerTlsCertificateDnsRecordCreationStateCode(Enum):
    SUCCEEDED = 'SUCCEEDED'
    STARTED = 'STARTED'
    FAILED = 'FAILED'


class LoadBalancerTlsCertificateDomainStatus(Enum):
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    FAILED = 'FAILED'
    SUCCESS = 'SUCCESS'


class LoadBalancerTlsCertificateDomainValidationOption(BaseModel):
    domainName: Optional[DomainName] = None
    validationStatus: Optional[LoadBalancerTlsCertificateDomainStatus] = None


class LoadBalancerTlsCertificateDomainValidationOptionList(
    RootModel[List[LoadBalancerTlsCertificateDomainValidationOption]]
):
    root: List[LoadBalancerTlsCertificateDomainValidationOption]


class LoadBalancerTlsCertificateFailureReason(Enum):
    NO_AVAILABLE_CONTACTS = 'NO_AVAILABLE_CONTACTS'
    ADDITIONAL_VERIFICATION_REQUIRED = 'ADDITIONAL_VERIFICATION_REQUIRED'
    DOMAIN_NOT_ALLOWED = 'DOMAIN_NOT_ALLOWED'
    INVALID_PUBLIC_DOMAIN = 'INVALID_PUBLIC_DOMAIN'
    OTHER = 'OTHER'


class LoadBalancerTlsCertificateRenewalStatus(Enum):
    PENDING_AUTO_RENEWAL = 'PENDING_AUTO_RENEWAL'
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class LoadBalancerTlsCertificateRenewalSummary(BaseModel):
    domainValidationOptions: Optional[
        LoadBalancerTlsCertificateDomainValidationOptionList
    ] = None
    renewalStatus: Optional[LoadBalancerTlsCertificateRenewalStatus] = None


class LoadBalancerTlsCertificateRevocationReason(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    KEY_COMPROMISE = 'KEY_COMPROMISE'
    CA_COMPROMISE = 'CA_COMPROMISE'
    AFFILIATION_CHANGED = 'AFFILIATION_CHANGED'
    SUPERCEDED = 'SUPERCEDED'
    CESSATION_OF_OPERATION = 'CESSATION_OF_OPERATION'
    CERTIFICATE_HOLD = 'CERTIFICATE_HOLD'
    REMOVE_FROM_CRL = 'REMOVE_FROM_CRL'
    PRIVILEGE_WITHDRAWN = 'PRIVILEGE_WITHDRAWN'
    A_A_COMPROMISE = 'A_A_COMPROMISE'


class LoadBalancerTlsCertificateStatus(Enum):
    PENDING_VALIDATION = 'PENDING_VALIDATION'
    ISSUED = 'ISSUED'
    INACTIVE = 'INACTIVE'
    EXPIRED = 'EXPIRED'
    VALIDATION_TIMED_OUT = 'VALIDATION_TIMED_OUT'
    REVOKED = 'REVOKED'
    FAILED = 'FAILED'
    UNKNOWN = 'UNKNOWN'


class MetricName(Enum):
    CPUUtilization = 'CPUUtilization'
    NetworkIn = 'NetworkIn'
    NetworkOut = 'NetworkOut'
    StatusCheckFailed = 'StatusCheckFailed'
    StatusCheckFailed_Instance = 'StatusCheckFailed_Instance'
    StatusCheckFailed_System = 'StatusCheckFailed_System'
    ClientTLSNegotiationErrorCount = 'ClientTLSNegotiationErrorCount'
    HealthyHostCount = 'HealthyHostCount'
    UnhealthyHostCount = 'UnhealthyHostCount'
    HTTPCode_LB_4XX_Count = 'HTTPCode_LB_4XX_Count'
    HTTPCode_LB_5XX_Count = 'HTTPCode_LB_5XX_Count'
    HTTPCode_Instance_2XX_Count = 'HTTPCode_Instance_2XX_Count'
    HTTPCode_Instance_3XX_Count = 'HTTPCode_Instance_3XX_Count'
    HTTPCode_Instance_4XX_Count = 'HTTPCode_Instance_4XX_Count'
    HTTPCode_Instance_5XX_Count = 'HTTPCode_Instance_5XX_Count'
    InstanceResponseTime = 'InstanceResponseTime'
    RejectedConnectionCount = 'RejectedConnectionCount'
    RequestCount = 'RequestCount'
    DatabaseConnections = 'DatabaseConnections'
    DiskQueueDepth = 'DiskQueueDepth'
    FreeStorageSpace = 'FreeStorageSpace'
    NetworkReceiveThroughput = 'NetworkReceiveThroughput'
    NetworkTransmitThroughput = 'NetworkTransmitThroughput'
    BurstCapacityTime = 'BurstCapacityTime'
    BurstCapacityPercentage = 'BurstCapacityPercentage'


class MetricPeriod(RootModel[conint(ge=60, le=86400)]):
    root: conint(ge=60, le=86400)


class MetricStatistic(Enum):
    Minimum = 'Minimum'
    Maximum = 'Maximum'
    Sum = 'Sum'
    Average = 'Average'
    SampleCount = 'SampleCount'


class MetricStatisticList(RootModel[List[MetricStatistic]]):
    root: List[MetricStatistic]


class MetricUnit(Enum):
    Seconds = 'Seconds'
    Microseconds = 'Microseconds'
    Milliseconds = 'Milliseconds'
    Bytes = 'Bytes'
    Kilobytes = 'Kilobytes'
    Megabytes = 'Megabytes'
    Gigabytes = 'Gigabytes'
    Terabytes = 'Terabytes'
    Bits = 'Bits'
    Kilobits = 'Kilobits'
    Megabits = 'Megabits'
    Gigabits = 'Gigabits'
    Terabits = 'Terabits'
    Percent = 'Percent'
    Count = 'Count'
    Bytes_Second = 'Bytes/Second'
    Kilobytes_Second = 'Kilobytes/Second'
    Megabytes_Second = 'Megabytes/Second'
    Gigabytes_Second = 'Gigabytes/Second'
    Terabytes_Second = 'Terabytes/Second'
    Bits_Second = 'Bits/Second'
    Kilobits_Second = 'Kilobits/Second'
    Megabits_Second = 'Megabits/Second'
    Gigabits_Second = 'Gigabits/Second'
    Terabits_Second = 'Terabits/Second'
    Count_Second = 'Count/Second'
    None_ = 'None'


class NameServersUpdateStateCode(Enum):
    SUCCEEDED = 'SUCCEEDED'
    PENDING = 'PENDING'
    FAILED = 'FAILED'
    STARTED = 'STARTED'


class NetworkProtocol(Enum):
    tcp = 'tcp'
    all = 'all'
    udp = 'udp'
    icmp = 'icmp'


class NonEmptyString(RootModel[constr(pattern=r'.*\S.*')]):
    root: constr(pattern=r'.*\S.*')


class NotFoundException(RootModel[Any]):
    root: Any


class NotificationTriggerList(RootModel[List[AlarmState]]):
    root: List[AlarmState]


class OperationFailureException(RootModel[Any]):
    root: Any


class OperationStatus(Enum):
    NotStarted = 'NotStarted'
    Started = 'Started'
    Failed = 'Failed'
    Completed = 'Completed'
    Succeeded = 'Succeeded'


class OperationType(Enum):
    DeleteKnownHostKeys = 'DeleteKnownHostKeys'
    DeleteInstance = 'DeleteInstance'
    CreateInstance = 'CreateInstance'
    StopInstance = 'StopInstance'
    StartInstance = 'StartInstance'
    RebootInstance = 'RebootInstance'
    OpenInstancePublicPorts = 'OpenInstancePublicPorts'
    PutInstancePublicPorts = 'PutInstancePublicPorts'
    CloseInstancePublicPorts = 'CloseInstancePublicPorts'
    AllocateStaticIp = 'AllocateStaticIp'
    ReleaseStaticIp = 'ReleaseStaticIp'
    AttachStaticIp = 'AttachStaticIp'
    DetachStaticIp = 'DetachStaticIp'
    UpdateDomainEntry = 'UpdateDomainEntry'
    DeleteDomainEntry = 'DeleteDomainEntry'
    CreateDomain = 'CreateDomain'
    DeleteDomain = 'DeleteDomain'
    CreateInstanceSnapshot = 'CreateInstanceSnapshot'
    DeleteInstanceSnapshot = 'DeleteInstanceSnapshot'
    CreateInstancesFromSnapshot = 'CreateInstancesFromSnapshot'
    CreateLoadBalancer = 'CreateLoadBalancer'
    DeleteLoadBalancer = 'DeleteLoadBalancer'
    AttachInstancesToLoadBalancer = 'AttachInstancesToLoadBalancer'
    DetachInstancesFromLoadBalancer = 'DetachInstancesFromLoadBalancer'
    UpdateLoadBalancerAttribute = 'UpdateLoadBalancerAttribute'
    CreateLoadBalancerTlsCertificate = 'CreateLoadBalancerTlsCertificate'
    DeleteLoadBalancerTlsCertificate = 'DeleteLoadBalancerTlsCertificate'
    AttachLoadBalancerTlsCertificate = 'AttachLoadBalancerTlsCertificate'
    CreateDisk = 'CreateDisk'
    DeleteDisk = 'DeleteDisk'
    AttachDisk = 'AttachDisk'
    DetachDisk = 'DetachDisk'
    CreateDiskSnapshot = 'CreateDiskSnapshot'
    DeleteDiskSnapshot = 'DeleteDiskSnapshot'
    CreateDiskFromSnapshot = 'CreateDiskFromSnapshot'
    CreateRelationalDatabase = 'CreateRelationalDatabase'
    UpdateRelationalDatabase = 'UpdateRelationalDatabase'
    DeleteRelationalDatabase = 'DeleteRelationalDatabase'
    CreateRelationalDatabaseFromSnapshot = 'CreateRelationalDatabaseFromSnapshot'
    CreateRelationalDatabaseSnapshot = 'CreateRelationalDatabaseSnapshot'
    DeleteRelationalDatabaseSnapshot = 'DeleteRelationalDatabaseSnapshot'
    UpdateRelationalDatabaseParameters = 'UpdateRelationalDatabaseParameters'
    StartRelationalDatabase = 'StartRelationalDatabase'
    RebootRelationalDatabase = 'RebootRelationalDatabase'
    StopRelationalDatabase = 'StopRelationalDatabase'
    EnableAddOn = 'EnableAddOn'
    DisableAddOn = 'DisableAddOn'
    PutAlarm = 'PutAlarm'
    GetAlarms = 'GetAlarms'
    DeleteAlarm = 'DeleteAlarm'
    TestAlarm = 'TestAlarm'
    CreateContactMethod = 'CreateContactMethod'
    GetContactMethods = 'GetContactMethods'
    SendContactMethodVerification = 'SendContactMethodVerification'
    DeleteContactMethod = 'DeleteContactMethod'
    CreateDistribution = 'CreateDistribution'
    UpdateDistribution = 'UpdateDistribution'
    DeleteDistribution = 'DeleteDistribution'
    ResetDistributionCache = 'ResetDistributionCache'
    AttachCertificateToDistribution = 'AttachCertificateToDistribution'
    DetachCertificateFromDistribution = 'DetachCertificateFromDistribution'
    UpdateDistributionBundle = 'UpdateDistributionBundle'
    SetIpAddressType = 'SetIpAddressType'
    CreateCertificate = 'CreateCertificate'
    DeleteCertificate = 'DeleteCertificate'
    CreateContainerService = 'CreateContainerService'
    UpdateContainerService = 'UpdateContainerService'
    DeleteContainerService = 'DeleteContainerService'
    CreateContainerServiceDeployment = 'CreateContainerServiceDeployment'
    CreateContainerServiceRegistryLogin = 'CreateContainerServiceRegistryLogin'
    RegisterContainerImage = 'RegisterContainerImage'
    DeleteContainerImage = 'DeleteContainerImage'
    CreateBucket = 'CreateBucket'
    DeleteBucket = 'DeleteBucket'
    CreateBucketAccessKey = 'CreateBucketAccessKey'
    DeleteBucketAccessKey = 'DeleteBucketAccessKey'
    UpdateBucketBundle = 'UpdateBucketBundle'
    UpdateBucket = 'UpdateBucket'
    SetResourceAccessForBucket = 'SetResourceAccessForBucket'
    UpdateInstanceMetadataOptions = 'UpdateInstanceMetadataOptions'
    StartGUISession = 'StartGUISession'
    StopGUISession = 'StopGUISession'


class OriginProtocolPolicyEnum(Enum):
    http_only = 'http-only'
    https_only = 'https-only'


class PartnerIdList(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString] = Field(..., max_length=10)


class PeerVpcRequest(BaseModel):
    pass


class PendingMaintenanceAction(BaseModel):
    action: Optional[NonEmptyString] = None
    currentApplyDate: Optional[IsoDate] = None
    description: Optional[NonEmptyString] = None


class PendingMaintenanceActionList(RootModel[List[PendingMaintenanceAction]]):
    root: List[PendingMaintenanceAction]


class Port(RootModel[conint(ge=-1, le=65535)]):
    root: conint(ge=-1, le=65535)


class PortAccessType(Enum):
    Public = 'Public'
    Private = 'Private'


class PortInfoSourceType(Enum):
    DEFAULT = 'DEFAULT'
    INSTANCE = 'INSTANCE'
    NONE = 'NONE'
    CLOSED = 'CLOSED'


class PortList(RootModel[List[Port]]):
    root: List[Port]


class PortMap(RootModel[Optional[Dict[str, ContainerServiceProtocol]]]):
    root: Optional[Dict[str, ContainerServiceProtocol]] = None


class PortState(Enum):
    open = 'open'
    closed = 'closed'


class PricingUnit(Enum):
    GB = 'GB'
    Hrs = 'Hrs'
    GB_Mo = 'GB-Mo'
    Bundles = 'Bundles'
    Queries = 'Queries'


class R53HostedZoneDeletionStateCode(Enum):
    SUCCEEDED = 'SUCCEEDED'
    PENDING = 'PENDING'
    FAILED = 'FAILED'
    STARTED = 'STARTED'


class RecordState(Enum):
    Started = 'Started'
    Succeeded = 'Succeeded'
    Failed = 'Failed'


class RegionName(Enum):
    us_east_1 = 'us-east-1'
    us_east_2 = 'us-east-2'
    us_west_1 = 'us-west-1'
    us_west_2 = 'us-west-2'
    eu_west_1 = 'eu-west-1'
    eu_west_2 = 'eu-west-2'
    eu_west_3 = 'eu-west-3'
    eu_central_1 = 'eu-central-1'
    ca_central_1 = 'ca-central-1'
    ap_south_1 = 'ap-south-1'
    ap_southeast_1 = 'ap-southeast-1'
    ap_southeast_2 = 'ap-southeast-2'
    ap_northeast_1 = 'ap-northeast-1'
    ap_northeast_2 = 'ap-northeast-2'
    eu_north_1 = 'eu-north-1'


class RelationalDatabaseEngine(Enum):
    mysql = 'mysql'


class RelationalDatabaseMetricName(Enum):
    CPUUtilization = 'CPUUtilization'
    DatabaseConnections = 'DatabaseConnections'
    DiskQueueDepth = 'DiskQueueDepth'
    FreeStorageSpace = 'FreeStorageSpace'
    NetworkReceiveThroughput = 'NetworkReceiveThroughput'
    NetworkTransmitThroughput = 'NetworkTransmitThroughput'


class RelationalDatabasePasswordVersion(Enum):
    CURRENT = 'CURRENT'
    PREVIOUS = 'PREVIOUS'
    PENDING = 'PENDING'


class RenewalStatus(Enum):
    PendingAutoRenewal = 'PendingAutoRenewal'
    PendingValidation = 'PendingValidation'
    Success = 'Success'
    Failed = 'Failed'


class RenewalStatusReason(RootModel[str]):
    root: str


class RequestFailureReason(RootModel[str]):
    root: str


class ResourceArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws[^:]*):([a-zA-Z0-9-]+):([a-z0-9-]+):([0-9]+):([a-zA-Z]+)/([a-zA-Z0-9-]+)$'
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws[^:]*):([a-zA-Z0-9-]+):([a-z0-9-]+):([0-9]+):([a-zA-Z]+)/([a-zA-Z0-9-]+)$'
    )


class ResourceBucketAccess(Enum):
    allow = 'allow'
    deny = 'deny'


class ResourceName(RootModel[constr(pattern=r'\w[\w\-]*\w')]):
    root: constr(pattern=r'\w[\w\-]*\w')


class ResourceNameList(RootModel[List[ResourceName]]):
    root: List[ResourceName]


class ResourceReceivingAccess(BaseModel):
    name: Optional[NonEmptyString] = None
    resourceType: Optional[NonEmptyString] = None


class ResourceType(Enum):
    ContainerService = 'ContainerService'
    Instance = 'Instance'
    StaticIp = 'StaticIp'
    KeyPair = 'KeyPair'
    InstanceSnapshot = 'InstanceSnapshot'
    Domain = 'Domain'
    PeeredVpc = 'PeeredVpc'
    LoadBalancer = 'LoadBalancer'
    LoadBalancerTlsCertificate = 'LoadBalancerTlsCertificate'
    Disk = 'Disk'
    DiskSnapshot = 'DiskSnapshot'
    RelationalDatabase = 'RelationalDatabase'
    RelationalDatabaseSnapshot = 'RelationalDatabaseSnapshot'
    ExportSnapshotRecord = 'ExportSnapshotRecord'
    CloudFormationStackRecord = 'CloudFormationStackRecord'
    Alarm = 'Alarm'
    ContactMethod = 'ContactMethod'
    Distribution = 'Distribution'
    Certificate = 'Certificate'
    Bucket = 'Bucket'


class RevocationReason(RootModel[str]):
    root: str


class SendContactMethodVerificationRequest(BaseModel):
    protocol: ContactMethodVerificationProtocol


class SensitiveNonEmptyString(RootModel[SecretStr]):
    root: SecretStr


class SensitiveString(RootModel[SecretStr]):
    root: SecretStr


class SerialNumber(RootModel[str]):
    root: str


class ServiceException(RootModel[Any]):
    root: Any


class SetIpAddressTypeRequest(BaseModel):
    ipAddressType: IpAddressType
    resourceName: ResourceName
    resourceType: ResourceType


class SetResourceAccessForBucketRequest(BaseModel):
    access: ResourceBucketAccess
    bucketName: BucketName
    resourceName: ResourceName


class StartGUISessionRequest(BaseModel):
    resourceName: ResourceName


class StartInstanceRequest(BaseModel):
    instanceName: ResourceName


class StartRelationalDatabaseRequest(BaseModel):
    relationalDatabaseName: ResourceName


class Status(Enum):
    startExpired = 'startExpired'
    notStarted = 'notStarted'
    started = 'started'
    starting = 'starting'
    stopped = 'stopped'
    stopping = 'stopping'
    settingUpInstance = 'settingUpInstance'
    failedInstanceCreation = 'failedInstanceCreation'
    failedStartingGUISession = 'failedStartingGUISession'
    failedStoppingGUISession = 'failedStoppingGUISession'


class StatusType(Enum):
    Active = 'Active'
    Inactive = 'Inactive'


class StopGUISessionRequest(BaseModel):
    resourceName: ResourceName


class StopRelationalDatabaseRequest(BaseModel):
    relationalDatabaseName: ResourceName
    relationalDatabaseSnapshotName: Optional[ResourceName] = None


class StringMax256(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class SubjectAlternativeNameList(RootModel[List[DomainName]]):
    root: List[DomainName]


class TagKey(RootModel[str]):
    root: str


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagValue(RootModel[str]):
    root: str


class TestAlarmRequest(BaseModel):
    alarmName: ResourceName
    state: AlarmState


class TimeOfDay(RootModel[constr(pattern=r'^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$')]):
    root: constr(pattern=r'^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$')


class TimePeriod(BaseModel):
    end: Optional[IsoDate] = None
    start: Optional[IsoDate] = None


class TreatMissingData(Enum):
    breaching = 'breaching'
    notBreaching = 'notBreaching'
    ignore = 'ignore'
    missing = 'missing'


class UnauthenticatedException(RootModel[Any]):
    root: Any


class UnpeerVpcRequest(BaseModel):
    pass


class UntagResourceRequest(BaseModel):
    resourceArn: Optional[ResourceArn] = None
    resourceName: ResourceName
    tagKeys: TagKeyList


class UpdateBucketBundleRequest(BaseModel):
    bucketName: BucketName
    bundleId: NonEmptyString


class UpdateLoadBalancerAttributeRequest(BaseModel):
    attributeName: LoadBalancerAttributeName
    attributeValue: StringMax256
    loadBalancerName: ResourceName


class Boolean(RootModel[bool]):
    root: bool


class Double(RootModel[float]):
    root: float


class Float(RootModel[float]):
    root: float


class Integer(RootModel[int]):
    root: int


class Long(RootModel[int]):
    root: int


class String(RootModel[str]):
    root: str


class Timestamp(RootModel[datetime]):
    root: datetime


class XAmzTarget(Enum):
    Lightsail_20161128_AllocateStaticIp = 'Lightsail_20161128.AllocateStaticIp'


class XAmzTarget1(Enum):
    Lightsail_20161128_AttachCertificateToDistribution = (
        'Lightsail_20161128.AttachCertificateToDistribution'
    )


class XAmzTarget2(Enum):
    Lightsail_20161128_AttachDisk = 'Lightsail_20161128.AttachDisk'


class XAmzTarget3(Enum):
    Lightsail_20161128_AttachInstancesToLoadBalancer = (
        'Lightsail_20161128.AttachInstancesToLoadBalancer'
    )


class XAmzTarget4(Enum):
    Lightsail_20161128_AttachLoadBalancerTlsCertificate = (
        'Lightsail_20161128.AttachLoadBalancerTlsCertificate'
    )


class XAmzTarget5(Enum):
    Lightsail_20161128_AttachStaticIp = 'Lightsail_20161128.AttachStaticIp'


class XAmzTarget6(Enum):
    Lightsail_20161128_CloseInstancePublicPorts = (
        'Lightsail_20161128.CloseInstancePublicPorts'
    )


class XAmzTarget7(Enum):
    Lightsail_20161128_CopySnapshot = 'Lightsail_20161128.CopySnapshot'


class XAmzTarget8(Enum):
    Lightsail_20161128_CreateBucket = 'Lightsail_20161128.CreateBucket'


class XAmzTarget9(Enum):
    Lightsail_20161128_CreateBucketAccessKey = (
        'Lightsail_20161128.CreateBucketAccessKey'
    )


class XAmzTarget10(Enum):
    Lightsail_20161128_CreateCertificate = 'Lightsail_20161128.CreateCertificate'


class XAmzTarget11(Enum):
    Lightsail_20161128_CreateCloudFormationStack = (
        'Lightsail_20161128.CreateCloudFormationStack'
    )


class XAmzTarget12(Enum):
    Lightsail_20161128_CreateContactMethod = 'Lightsail_20161128.CreateContactMethod'


class XAmzTarget13(Enum):
    Lightsail_20161128_CreateContainerService = (
        'Lightsail_20161128.CreateContainerService'
    )


class XAmzTarget14(Enum):
    Lightsail_20161128_CreateContainerServiceDeployment = (
        'Lightsail_20161128.CreateContainerServiceDeployment'
    )


class XAmzTarget15(Enum):
    Lightsail_20161128_CreateContainerServiceRegistryLogin = (
        'Lightsail_20161128.CreateContainerServiceRegistryLogin'
    )


class XAmzTarget16(Enum):
    Lightsail_20161128_CreateDisk = 'Lightsail_20161128.CreateDisk'


class XAmzTarget17(Enum):
    Lightsail_20161128_CreateDiskFromSnapshot = (
        'Lightsail_20161128.CreateDiskFromSnapshot'
    )


class XAmzTarget18(Enum):
    Lightsail_20161128_CreateDiskSnapshot = 'Lightsail_20161128.CreateDiskSnapshot'


class XAmzTarget19(Enum):
    Lightsail_20161128_CreateDistribution = 'Lightsail_20161128.CreateDistribution'


class XAmzTarget20(Enum):
    Lightsail_20161128_CreateDomain = 'Lightsail_20161128.CreateDomain'


class XAmzTarget21(Enum):
    Lightsail_20161128_CreateDomainEntry = 'Lightsail_20161128.CreateDomainEntry'


class XAmzTarget22(Enum):
    Lightsail_20161128_CreateGUISessionAccessDetails = (
        'Lightsail_20161128.CreateGUISessionAccessDetails'
    )


class XAmzTarget23(Enum):
    Lightsail_20161128_CreateInstanceSnapshot = (
        'Lightsail_20161128.CreateInstanceSnapshot'
    )


class XAmzTarget24(Enum):
    Lightsail_20161128_CreateInstances = 'Lightsail_20161128.CreateInstances'


class XAmzTarget25(Enum):
    Lightsail_20161128_CreateInstancesFromSnapshot = (
        'Lightsail_20161128.CreateInstancesFromSnapshot'
    )


class XAmzTarget26(Enum):
    Lightsail_20161128_CreateKeyPair = 'Lightsail_20161128.CreateKeyPair'


class XAmzTarget27(Enum):
    Lightsail_20161128_CreateLoadBalancer = 'Lightsail_20161128.CreateLoadBalancer'


class XAmzTarget28(Enum):
    Lightsail_20161128_CreateLoadBalancerTlsCertificate = (
        'Lightsail_20161128.CreateLoadBalancerTlsCertificate'
    )


class XAmzTarget29(Enum):
    Lightsail_20161128_CreateRelationalDatabase = (
        'Lightsail_20161128.CreateRelationalDatabase'
    )


class XAmzTarget30(Enum):
    Lightsail_20161128_CreateRelationalDatabaseFromSnapshot = (
        'Lightsail_20161128.CreateRelationalDatabaseFromSnapshot'
    )


class XAmzTarget31(Enum):
    Lightsail_20161128_CreateRelationalDatabaseSnapshot = (
        'Lightsail_20161128.CreateRelationalDatabaseSnapshot'
    )


class XAmzTarget32(Enum):
    Lightsail_20161128_DeleteAlarm = 'Lightsail_20161128.DeleteAlarm'


class XAmzTarget33(Enum):
    Lightsail_20161128_DeleteAutoSnapshot = 'Lightsail_20161128.DeleteAutoSnapshot'


class XAmzTarget34(Enum):
    Lightsail_20161128_DeleteBucket = 'Lightsail_20161128.DeleteBucket'


class XAmzTarget35(Enum):
    Lightsail_20161128_DeleteBucketAccessKey = (
        'Lightsail_20161128.DeleteBucketAccessKey'
    )


class XAmzTarget36(Enum):
    Lightsail_20161128_DeleteCertificate = 'Lightsail_20161128.DeleteCertificate'


class XAmzTarget37(Enum):
    Lightsail_20161128_DeleteContactMethod = 'Lightsail_20161128.DeleteContactMethod'


class XAmzTarget38(Enum):
    Lightsail_20161128_DeleteContainerImage = 'Lightsail_20161128.DeleteContainerImage'


class XAmzTarget39(Enum):
    Lightsail_20161128_DeleteContainerService = (
        'Lightsail_20161128.DeleteContainerService'
    )


class XAmzTarget40(Enum):
    Lightsail_20161128_DeleteDisk = 'Lightsail_20161128.DeleteDisk'


class XAmzTarget41(Enum):
    Lightsail_20161128_DeleteDiskSnapshot = 'Lightsail_20161128.DeleteDiskSnapshot'


class XAmzTarget42(Enum):
    Lightsail_20161128_DeleteDistribution = 'Lightsail_20161128.DeleteDistribution'


class XAmzTarget43(Enum):
    Lightsail_20161128_DeleteDomain = 'Lightsail_20161128.DeleteDomain'


class XAmzTarget44(Enum):
    Lightsail_20161128_DeleteDomainEntry = 'Lightsail_20161128.DeleteDomainEntry'


class XAmzTarget45(Enum):
    Lightsail_20161128_DeleteInstance = 'Lightsail_20161128.DeleteInstance'


class XAmzTarget46(Enum):
    Lightsail_20161128_DeleteInstanceSnapshot = (
        'Lightsail_20161128.DeleteInstanceSnapshot'
    )


class XAmzTarget47(Enum):
    Lightsail_20161128_DeleteKeyPair = 'Lightsail_20161128.DeleteKeyPair'


class XAmzTarget48(Enum):
    Lightsail_20161128_DeleteKnownHostKeys = 'Lightsail_20161128.DeleteKnownHostKeys'


class XAmzTarget49(Enum):
    Lightsail_20161128_DeleteLoadBalancer = 'Lightsail_20161128.DeleteLoadBalancer'


class XAmzTarget50(Enum):
    Lightsail_20161128_DeleteLoadBalancerTlsCertificate = (
        'Lightsail_20161128.DeleteLoadBalancerTlsCertificate'
    )


class XAmzTarget51(Enum):
    Lightsail_20161128_DeleteRelationalDatabase = (
        'Lightsail_20161128.DeleteRelationalDatabase'
    )


class XAmzTarget52(Enum):
    Lightsail_20161128_DeleteRelationalDatabaseSnapshot = (
        'Lightsail_20161128.DeleteRelationalDatabaseSnapshot'
    )


class XAmzTarget53(Enum):
    Lightsail_20161128_DetachCertificateFromDistribution = (
        'Lightsail_20161128.DetachCertificateFromDistribution'
    )


class XAmzTarget54(Enum):
    Lightsail_20161128_DetachDisk = 'Lightsail_20161128.DetachDisk'


class XAmzTarget55(Enum):
    Lightsail_20161128_DetachInstancesFromLoadBalancer = (
        'Lightsail_20161128.DetachInstancesFromLoadBalancer'
    )


class XAmzTarget56(Enum):
    Lightsail_20161128_DetachStaticIp = 'Lightsail_20161128.DetachStaticIp'


class XAmzTarget57(Enum):
    Lightsail_20161128_DisableAddOn = 'Lightsail_20161128.DisableAddOn'


class XAmzTarget58(Enum):
    Lightsail_20161128_DownloadDefaultKeyPair = (
        'Lightsail_20161128.DownloadDefaultKeyPair'
    )


class XAmzTarget59(Enum):
    Lightsail_20161128_EnableAddOn = 'Lightsail_20161128.EnableAddOn'


class XAmzTarget60(Enum):
    Lightsail_20161128_ExportSnapshot = 'Lightsail_20161128.ExportSnapshot'


class XAmzTarget61(Enum):
    Lightsail_20161128_GetActiveNames = 'Lightsail_20161128.GetActiveNames'


class XAmzTarget62(Enum):
    Lightsail_20161128_GetAlarms = 'Lightsail_20161128.GetAlarms'


class XAmzTarget63(Enum):
    Lightsail_20161128_GetAutoSnapshots = 'Lightsail_20161128.GetAutoSnapshots'


class XAmzTarget64(Enum):
    Lightsail_20161128_GetBlueprints = 'Lightsail_20161128.GetBlueprints'


class XAmzTarget65(Enum):
    Lightsail_20161128_GetBucketAccessKeys = 'Lightsail_20161128.GetBucketAccessKeys'


class XAmzTarget66(Enum):
    Lightsail_20161128_GetBucketBundles = 'Lightsail_20161128.GetBucketBundles'


class XAmzTarget67(Enum):
    Lightsail_20161128_GetBucketMetricData = 'Lightsail_20161128.GetBucketMetricData'


class XAmzTarget68(Enum):
    Lightsail_20161128_GetBuckets = 'Lightsail_20161128.GetBuckets'


class XAmzTarget69(Enum):
    Lightsail_20161128_GetBundles = 'Lightsail_20161128.GetBundles'


class XAmzTarget70(Enum):
    Lightsail_20161128_GetCertificates = 'Lightsail_20161128.GetCertificates'


class XAmzTarget71(Enum):
    Lightsail_20161128_GetCloudFormationStackRecords = (
        'Lightsail_20161128.GetCloudFormationStackRecords'
    )


class XAmzTarget72(Enum):
    Lightsail_20161128_GetContactMethods = 'Lightsail_20161128.GetContactMethods'


class XAmzTarget73(Enum):
    Lightsail_20161128_GetContainerAPIMetadata = (
        'Lightsail_20161128.GetContainerAPIMetadata'
    )


class XAmzTarget74(Enum):
    Lightsail_20161128_GetContainerImages = 'Lightsail_20161128.GetContainerImages'


class XAmzTarget75(Enum):
    Lightsail_20161128_GetContainerLog = 'Lightsail_20161128.GetContainerLog'


class XAmzTarget76(Enum):
    Lightsail_20161128_GetContainerServiceDeployments = (
        'Lightsail_20161128.GetContainerServiceDeployments'
    )


class XAmzTarget77(Enum):
    Lightsail_20161128_GetContainerServiceMetricData = (
        'Lightsail_20161128.GetContainerServiceMetricData'
    )


class XAmzTarget78(Enum):
    Lightsail_20161128_GetContainerServicePowers = (
        'Lightsail_20161128.GetContainerServicePowers'
    )


class XAmzTarget79(Enum):
    Lightsail_20161128_GetContainerServices = 'Lightsail_20161128.GetContainerServices'


class XAmzTarget80(Enum):
    Lightsail_20161128_GetCostEstimate = 'Lightsail_20161128.GetCostEstimate'


class XAmzTarget81(Enum):
    Lightsail_20161128_GetDisk = 'Lightsail_20161128.GetDisk'


class XAmzTarget82(Enum):
    Lightsail_20161128_GetDiskSnapshot = 'Lightsail_20161128.GetDiskSnapshot'


class XAmzTarget83(Enum):
    Lightsail_20161128_GetDiskSnapshots = 'Lightsail_20161128.GetDiskSnapshots'


class XAmzTarget84(Enum):
    Lightsail_20161128_GetDisks = 'Lightsail_20161128.GetDisks'


class XAmzTarget85(Enum):
    Lightsail_20161128_GetDistributionBundles = (
        'Lightsail_20161128.GetDistributionBundles'
    )


class XAmzTarget86(Enum):
    Lightsail_20161128_GetDistributionLatestCacheReset = (
        'Lightsail_20161128.GetDistributionLatestCacheReset'
    )


class XAmzTarget87(Enum):
    Lightsail_20161128_GetDistributionMetricData = (
        'Lightsail_20161128.GetDistributionMetricData'
    )


class XAmzTarget88(Enum):
    Lightsail_20161128_GetDistributions = 'Lightsail_20161128.GetDistributions'


class XAmzTarget89(Enum):
    Lightsail_20161128_GetDomain = 'Lightsail_20161128.GetDomain'


class XAmzTarget90(Enum):
    Lightsail_20161128_GetDomains = 'Lightsail_20161128.GetDomains'


class XAmzTarget91(Enum):
    Lightsail_20161128_GetExportSnapshotRecords = (
        'Lightsail_20161128.GetExportSnapshotRecords'
    )


class XAmzTarget92(Enum):
    Lightsail_20161128_GetInstance = 'Lightsail_20161128.GetInstance'


class XAmzTarget93(Enum):
    Lightsail_20161128_GetInstanceAccessDetails = (
        'Lightsail_20161128.GetInstanceAccessDetails'
    )


class XAmzTarget94(Enum):
    Lightsail_20161128_GetInstanceMetricData = (
        'Lightsail_20161128.GetInstanceMetricData'
    )


class XAmzTarget95(Enum):
    Lightsail_20161128_GetInstancePortStates = (
        'Lightsail_20161128.GetInstancePortStates'
    )


class XAmzTarget96(Enum):
    Lightsail_20161128_GetInstanceSnapshot = 'Lightsail_20161128.GetInstanceSnapshot'


class XAmzTarget97(Enum):
    Lightsail_20161128_GetInstanceSnapshots = 'Lightsail_20161128.GetInstanceSnapshots'


class XAmzTarget98(Enum):
    Lightsail_20161128_GetInstanceState = 'Lightsail_20161128.GetInstanceState'


class XAmzTarget99(Enum):
    Lightsail_20161128_GetInstances = 'Lightsail_20161128.GetInstances'


class XAmzTarget100(Enum):
    Lightsail_20161128_GetKeyPair = 'Lightsail_20161128.GetKeyPair'


class XAmzTarget101(Enum):
    Lightsail_20161128_GetKeyPairs = 'Lightsail_20161128.GetKeyPairs'


class XAmzTarget102(Enum):
    Lightsail_20161128_GetLoadBalancer = 'Lightsail_20161128.GetLoadBalancer'


class XAmzTarget103(Enum):
    Lightsail_20161128_GetLoadBalancerMetricData = (
        'Lightsail_20161128.GetLoadBalancerMetricData'
    )


class XAmzTarget104(Enum):
    Lightsail_20161128_GetLoadBalancerTlsCertificates = (
        'Lightsail_20161128.GetLoadBalancerTlsCertificates'
    )


class XAmzTarget105(Enum):
    Lightsail_20161128_GetLoadBalancerTlsPolicies = (
        'Lightsail_20161128.GetLoadBalancerTlsPolicies'
    )


class XAmzTarget106(Enum):
    Lightsail_20161128_GetLoadBalancers = 'Lightsail_20161128.GetLoadBalancers'


class XAmzTarget107(Enum):
    Lightsail_20161128_GetOperation = 'Lightsail_20161128.GetOperation'


class XAmzTarget108(Enum):
    Lightsail_20161128_GetOperations = 'Lightsail_20161128.GetOperations'


class XAmzTarget109(Enum):
    Lightsail_20161128_GetOperationsForResource = (
        'Lightsail_20161128.GetOperationsForResource'
    )


class XAmzTarget110(Enum):
    Lightsail_20161128_GetRegions = 'Lightsail_20161128.GetRegions'


class XAmzTarget111(Enum):
    Lightsail_20161128_GetRelationalDatabase = (
        'Lightsail_20161128.GetRelationalDatabase'
    )


class XAmzTarget112(Enum):
    Lightsail_20161128_GetRelationalDatabaseBlueprints = (
        'Lightsail_20161128.GetRelationalDatabaseBlueprints'
    )


class XAmzTarget113(Enum):
    Lightsail_20161128_GetRelationalDatabaseBundles = (
        'Lightsail_20161128.GetRelationalDatabaseBundles'
    )


class XAmzTarget114(Enum):
    Lightsail_20161128_GetRelationalDatabaseEvents = (
        'Lightsail_20161128.GetRelationalDatabaseEvents'
    )


class XAmzTarget115(Enum):
    Lightsail_20161128_GetRelationalDatabaseLogEvents = (
        'Lightsail_20161128.GetRelationalDatabaseLogEvents'
    )


class XAmzTarget116(Enum):
    Lightsail_20161128_GetRelationalDatabaseLogStreams = (
        'Lightsail_20161128.GetRelationalDatabaseLogStreams'
    )


class XAmzTarget117(Enum):
    Lightsail_20161128_GetRelationalDatabaseMasterUserPassword = (
        'Lightsail_20161128.GetRelationalDatabaseMasterUserPassword'
    )


class XAmzTarget118(Enum):
    Lightsail_20161128_GetRelationalDatabaseMetricData = (
        'Lightsail_20161128.GetRelationalDatabaseMetricData'
    )


class XAmzTarget119(Enum):
    Lightsail_20161128_GetRelationalDatabaseParameters = (
        'Lightsail_20161128.GetRelationalDatabaseParameters'
    )


class XAmzTarget120(Enum):
    Lightsail_20161128_GetRelationalDatabaseSnapshot = (
        'Lightsail_20161128.GetRelationalDatabaseSnapshot'
    )


class XAmzTarget121(Enum):
    Lightsail_20161128_GetRelationalDatabaseSnapshots = (
        'Lightsail_20161128.GetRelationalDatabaseSnapshots'
    )


class XAmzTarget122(Enum):
    Lightsail_20161128_GetRelationalDatabases = (
        'Lightsail_20161128.GetRelationalDatabases'
    )


class XAmzTarget123(Enum):
    Lightsail_20161128_GetStaticIp = 'Lightsail_20161128.GetStaticIp'


class XAmzTarget124(Enum):
    Lightsail_20161128_GetStaticIps = 'Lightsail_20161128.GetStaticIps'


class XAmzTarget125(Enum):
    Lightsail_20161128_ImportKeyPair = 'Lightsail_20161128.ImportKeyPair'


class XAmzTarget126(Enum):
    Lightsail_20161128_IsVpcPeered = 'Lightsail_20161128.IsVpcPeered'


class XAmzTarget127(Enum):
    Lightsail_20161128_OpenInstancePublicPorts = (
        'Lightsail_20161128.OpenInstancePublicPorts'
    )


class XAmzTarget128(Enum):
    Lightsail_20161128_PeerVpc = 'Lightsail_20161128.PeerVpc'


class XAmzTarget129(Enum):
    Lightsail_20161128_PutAlarm = 'Lightsail_20161128.PutAlarm'


class XAmzTarget130(Enum):
    Lightsail_20161128_PutInstancePublicPorts = (
        'Lightsail_20161128.PutInstancePublicPorts'
    )


class XAmzTarget131(Enum):
    Lightsail_20161128_RebootInstance = 'Lightsail_20161128.RebootInstance'


class XAmzTarget132(Enum):
    Lightsail_20161128_RebootRelationalDatabase = (
        'Lightsail_20161128.RebootRelationalDatabase'
    )


class XAmzTarget133(Enum):
    Lightsail_20161128_RegisterContainerImage = (
        'Lightsail_20161128.RegisterContainerImage'
    )


class XAmzTarget134(Enum):
    Lightsail_20161128_ReleaseStaticIp = 'Lightsail_20161128.ReleaseStaticIp'


class XAmzTarget135(Enum):
    Lightsail_20161128_ResetDistributionCache = (
        'Lightsail_20161128.ResetDistributionCache'
    )


class XAmzTarget136(Enum):
    Lightsail_20161128_SendContactMethodVerification = (
        'Lightsail_20161128.SendContactMethodVerification'
    )


class XAmzTarget137(Enum):
    Lightsail_20161128_SetIpAddressType = 'Lightsail_20161128.SetIpAddressType'


class XAmzTarget138(Enum):
    Lightsail_20161128_SetResourceAccessForBucket = (
        'Lightsail_20161128.SetResourceAccessForBucket'
    )


class XAmzTarget139(Enum):
    Lightsail_20161128_StartGUISession = 'Lightsail_20161128.StartGUISession'


class XAmzTarget140(Enum):
    Lightsail_20161128_StartInstance = 'Lightsail_20161128.StartInstance'


class XAmzTarget141(Enum):
    Lightsail_20161128_StartRelationalDatabase = (
        'Lightsail_20161128.StartRelationalDatabase'
    )


class XAmzTarget142(Enum):
    Lightsail_20161128_StopGUISession = 'Lightsail_20161128.StopGUISession'


class XAmzTarget143(Enum):
    Lightsail_20161128_StopInstance = 'Lightsail_20161128.StopInstance'


class XAmzTarget144(Enum):
    Lightsail_20161128_StopRelationalDatabase = (
        'Lightsail_20161128.StopRelationalDatabase'
    )


class XAmzTarget145(Enum):
    Lightsail_20161128_TagResource = 'Lightsail_20161128.TagResource'


class XAmzTarget146(Enum):
    Lightsail_20161128_TestAlarm = 'Lightsail_20161128.TestAlarm'


class XAmzTarget147(Enum):
    Lightsail_20161128_UnpeerVpc = 'Lightsail_20161128.UnpeerVpc'


class XAmzTarget148(Enum):
    Lightsail_20161128_UntagResource = 'Lightsail_20161128.UntagResource'


class XAmzTarget149(Enum):
    Lightsail_20161128_UpdateBucket = 'Lightsail_20161128.UpdateBucket'


class XAmzTarget150(Enum):
    Lightsail_20161128_UpdateBucketBundle = 'Lightsail_20161128.UpdateBucketBundle'


class XAmzTarget151(Enum):
    Lightsail_20161128_UpdateContainerService = (
        'Lightsail_20161128.UpdateContainerService'
    )


class XAmzTarget152(Enum):
    Lightsail_20161128_UpdateDistribution = 'Lightsail_20161128.UpdateDistribution'


class XAmzTarget153(Enum):
    Lightsail_20161128_UpdateDistributionBundle = (
        'Lightsail_20161128.UpdateDistributionBundle'
    )


class XAmzTarget154(Enum):
    Lightsail_20161128_UpdateDomainEntry = 'Lightsail_20161128.UpdateDomainEntry'


class XAmzTarget155(Enum):
    Lightsail_20161128_UpdateInstanceMetadataOptions = (
        'Lightsail_20161128.UpdateInstanceMetadataOptions'
    )


class XAmzTarget156(Enum):
    Lightsail_20161128_UpdateLoadBalancerAttribute = (
        'Lightsail_20161128.UpdateLoadBalancerAttribute'
    )


class XAmzTarget157(Enum):
    Lightsail_20161128_UpdateRelationalDatabase = (
        'Lightsail_20161128.UpdateRelationalDatabase'
    )


class XAmzTarget158(Enum):
    Lightsail_20161128_UpdateRelationalDatabaseParameters = (
        'Lightsail_20161128.UpdateRelationalDatabaseParameters'
    )


class AccessKeyLastUsed(BaseModel):
    lastUsedDate: Optional[IsoDate] = None
    region: Optional[String] = None
    serviceName: Optional[String] = None


class AccessReceiverList(RootModel[List[ResourceReceivingAccess]]):
    root: List[ResourceReceivingAccess]


class AccessRules(BaseModel):
    allowPublicOverrides: Optional[Boolean] = None
    getObject: Optional[AccessType] = None


class AccountLevelBpaSync(BaseModel):
    bpaImpactsLightsail: Optional[Boolean] = None
    lastSyncedAt: Optional[IsoDate] = None
    message: Optional[BPAStatusMessage] = None
    status: Optional[AccountLevelBpaSyncStatus] = None


class AddOn(BaseModel):
    duration: Optional[String] = None
    name: Optional[String] = None
    nextSnapshotTimeOfDay: Optional[TimeOfDay] = None
    snapshotTimeOfDay: Optional[TimeOfDay] = None
    status: Optional[String] = None
    threshold: Optional[String] = None


class AddOnList(RootModel[List[AddOn]]):
    root: List[AddOn]


class AllocateStaticIpRequest(BaseModel):
    staticIpName: ResourceName


class AttachCertificateToDistributionRequest(BaseModel):
    certificateName: ResourceName
    distributionName: ResourceName


class AttachDiskRequest(BaseModel):
    autoMounting: Optional[Boolean] = None
    diskName: ResourceName
    diskPath: NonEmptyString
    instanceName: ResourceName


class AttachInstancesToLoadBalancerRequest(BaseModel):
    instanceNames: ResourceNameList
    loadBalancerName: ResourceName


class AttachLoadBalancerTlsCertificateRequest(BaseModel):
    certificateName: ResourceName
    loadBalancerName: ResourceName


class AttachStaticIpRequest(BaseModel):
    instanceName: ResourceName
    staticIpName: ResourceName


class AttachedDisk(BaseModel):
    path: Optional[String] = None
    sizeInGb: Optional[Integer] = None


class AttachedDiskList(RootModel[List[AttachedDisk]]):
    root: List[AttachedDisk]


class AutoSnapshotAddOnRequest(BaseModel):
    snapshotTimeOfDay: Optional[TimeOfDay] = None


class AutoSnapshotDetails(BaseModel):
    createdAt: Optional[IsoDate] = None
    date: Optional[String] = None
    fromAttachedDisks: Optional[AttachedDiskList] = None
    status: Optional[AutoSnapshotStatus] = None


class AutoSnapshotDetailsList(RootModel[List[AutoSnapshotDetails]]):
    root: List[AutoSnapshotDetails]


class AvailabilityZone(BaseModel):
    state: Optional[NonEmptyString] = None
    zoneName: Optional[NonEmptyString] = None


class AvailabilityZoneList(RootModel[List[AvailabilityZone]]):
    root: List[AvailabilityZone]


class Blueprint(BaseModel):
    appCategory: Optional[AppCategory] = None
    blueprintId: Optional[NonEmptyString] = None
    description: Optional[String] = None
    group: Optional[NonEmptyString] = None
    isActive: Optional[Boolean] = None
    licenseUrl: Optional[String] = None
    minPower: Optional[Integer] = None
    name: Optional[ResourceName] = None
    platform: Optional[InstancePlatform] = None
    productUrl: Optional[String] = None
    type: Optional[BlueprintType] = None
    version: Optional[String] = None
    versionCode: Optional[String] = None


class BlueprintList(RootModel[List[Blueprint]]):
    root: List[Blueprint]


class BucketAccessLogConfig(BaseModel):
    destination: Optional[BucketName] = None
    enabled: Boolean
    prefix: Optional[BucketAccessLogPrefix] = None


class BucketBundle(BaseModel):
    bundleId: Optional[NonEmptyString] = None
    isActive: Optional[Boolean] = None
    name: Optional[NonEmptyString] = None
    price: Optional[Float] = None
    storagePerMonthInGb: Optional[Integer] = None
    transferPerMonthInGb: Optional[Integer] = None


class BucketBundleList(RootModel[List[BucketBundle]]):
    root: List[BucketBundle]


class BucketState(BaseModel):
    code: Optional[NonEmptyString] = None
    message: Optional[String] = None


class Bundle(BaseModel):
    bundleId: Optional[NonEmptyString] = None
    cpuCount: Optional[Integer] = None
    diskSizeInGb: Optional[Integer] = None
    instanceType: Optional[String] = None
    isActive: Optional[Boolean] = None
    name: Optional[String] = None
    power: Optional[Integer] = None
    price: Optional[Float] = None
    ramSizeInGb: Optional[Float] = None
    supportedAppCategories: Optional[AppCategoryList] = None
    supportedPlatforms: Optional[InstancePlatformList] = None
    transferPerMonthInGb: Optional[Integer] = None


class BundleList(RootModel[List[Bundle]]):
    root: List[Bundle]


class CacheBehaviorPerPath(BaseModel):
    behavior: Optional[BehaviorEnum] = None
    path: Optional[String] = None


class CloudFormationStackRecordSourceInfo(BaseModel):
    arn: Optional[NonEmptyString] = None
    name: Optional[NonEmptyString] = None
    resourceType: Optional[CloudFormationStackRecordSourceType] = None


class CloudFormationStackRecordSourceInfoList(
    RootModel[List[CloudFormationStackRecordSourceInfo]]
):
    root: List[CloudFormationStackRecordSourceInfo]


class ContainerImage(BaseModel):
    createdAt: Optional[IsoDate] = None
    digest: Optional[String] = None
    image: Optional[String] = None


class ContainerImageList(RootModel[List[ContainerImage]]):
    root: List[ContainerImage]


class ContainerServiceECRImagePullerRole(BaseModel):
    isActive: Optional[Boolean] = None
    principalArn: Optional[String] = None


class ContainerServiceECRImagePullerRoleRequest(BaseModel):
    isActive: Optional[Boolean] = None


class ContainerServiceHealthCheckConfig(BaseModel):
    healthyThreshold: Optional[Integer] = None
    intervalSeconds: Optional[Integer] = None
    path: Optional[String] = None
    successCodes: Optional[String] = None
    timeoutSeconds: Optional[Integer] = None
    unhealthyThreshold: Optional[Integer] = None


class ContainerServiceLogEvent(BaseModel):
    createdAt: Optional[IsoDate] = None
    message: Optional[String] = None


class ContainerServiceLogEventList(RootModel[List[ContainerServiceLogEvent]]):
    root: List[ContainerServiceLogEvent]


class ContainerServiceMetadataEntry(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class ContainerServiceMetadataEntryList(RootModel[List[ContainerServiceMetadataEntry]]):
    root: List[ContainerServiceMetadataEntry]


class ContainerServicePower(BaseModel):
    cpuCount: Optional[Float] = None
    isActive: Optional[Boolean] = None
    name: Optional[String] = None
    powerId: Optional[String] = None
    price: Optional[Float] = None
    ramSizeInGb: Optional[Float] = None


class ContainerServicePowerList(RootModel[List[ContainerServicePower]]):
    root: List[ContainerServicePower]


class ContainerServicePublicDomainsList(RootModel[List[String]]):
    root: List[String]


class ContainerServiceRegistryLogin(BaseModel):
    expiresAt: Optional[IsoDate] = None
    password: Optional[String] = None
    registry: Optional[String] = None
    username: Optional[String] = None


class ContainerServiceStateDetail(BaseModel):
    code: Optional[ContainerServiceStateDetailCode] = None
    message: Optional[String] = None


class CopySnapshotRequest(BaseModel):
    restoreDate: Optional[String] = None
    sourceRegion: RegionName
    sourceResourceName: Optional[String] = None
    sourceSnapshotName: Optional[ResourceName] = None
    targetSnapshotName: ResourceName
    useLatestRestorableAutoSnapshot: Optional[Boolean] = None


class CreateContactMethodRequest(BaseModel):
    contactEndpoint: StringMax256
    protocol: ContactProtocol


class CreateContainerServiceRegistryLoginResult(BaseModel):
    registryLogin: Optional[ContainerServiceRegistryLogin] = None


class CreateGUISessionAccessDetailsRequest(BaseModel):
    resourceName: ResourceName


class DeleteAlarmRequest(BaseModel):
    alarmName: ResourceName


class DeleteAutoSnapshotRequest(BaseModel):
    date: AutoSnapshotDate
    resourceName: ResourceName


class DeleteBucketAccessKeyRequest(BaseModel):
    accessKeyId: NonEmptyString
    bucketName: BucketName


class DeleteBucketRequest(BaseModel):
    bucketName: BucketName
    forceDelete: Optional[Boolean] = None


class DeleteContainerImageRequest(BaseModel):
    image: String
    serviceName: ContainerServiceName


class DeleteDiskRequest(BaseModel):
    diskName: ResourceName
    forceDeleteAddOns: Optional[Boolean] = None


class DeleteDiskSnapshotRequest(BaseModel):
    diskSnapshotName: ResourceName


class DeleteDistributionRequest(BaseModel):
    distributionName: Optional[ResourceName] = None


class DeleteDomainRequest(BaseModel):
    domainName: DomainName


class DeleteInstanceRequest(BaseModel):
    forceDeleteAddOns: Optional[Boolean] = None
    instanceName: ResourceName


class DeleteInstanceSnapshotRequest(BaseModel):
    instanceSnapshotName: ResourceName


class DeleteKeyPairRequest(BaseModel):
    expectedFingerprint: Optional[String] = None
    keyPairName: ResourceName


class DeleteKnownHostKeysRequest(BaseModel):
    instanceName: ResourceName


class DeleteLoadBalancerRequest(BaseModel):
    loadBalancerName: ResourceName


class DeleteLoadBalancerTlsCertificateRequest(BaseModel):
    certificateName: ResourceName
    force: Optional[Boolean] = None
    loadBalancerName: ResourceName


class DeleteRelationalDatabaseRequest(BaseModel):
    finalRelationalDatabaseSnapshotName: Optional[ResourceName] = None
    relationalDatabaseName: ResourceName
    skipFinalSnapshot: Optional[Boolean] = None


class DeleteRelationalDatabaseSnapshotRequest(BaseModel):
    relationalDatabaseSnapshotName: ResourceName


class DestinationInfo(BaseModel):
    id: Optional[NonEmptyString] = None
    service: Optional[NonEmptyString] = None


class DetachCertificateFromDistributionRequest(BaseModel):
    distributionName: ResourceName


class DetachDiskRequest(BaseModel):
    diskName: ResourceName


class DetachInstancesFromLoadBalancerRequest(BaseModel):
    instanceNames: ResourceNameList
    loadBalancerName: ResourceName


class DetachStaticIpRequest(BaseModel):
    staticIpName: ResourceName


class DisableAddOnRequest(BaseModel):
    addOnType: AddOnType
    resourceName: ResourceName


class DiskInfo(BaseModel):
    isSystemDisk: Optional[Boolean] = None
    name: Optional[String] = None
    path: Optional[NonEmptyString] = None
    sizeInGb: Optional[Integer] = None


class DiskInfoList(RootModel[List[DiskInfo]]):
    root: List[DiskInfo]


class DiskMap(BaseModel):
    newDiskName: Optional[ResourceName] = None
    originalDiskPath: Optional[NonEmptyString] = None


class DiskMapList(RootModel[List[DiskMap]]):
    root: List[DiskMap]


class DiskSnapshotInfo(BaseModel):
    sizeInGb: Optional[Integer] = None


class DistributionBundle(BaseModel):
    bundleId: Optional[String] = None
    isActive: Optional[Boolean] = None
    name: Optional[String] = None
    price: Optional[Float] = None
    transferPerMonthInGb: Optional[Integer] = None


class DistributionBundleList(RootModel[List[DistributionBundle]]):
    root: List[DistributionBundle]


class DnsRecordCreationState(BaseModel):
    code: Optional[DnsRecordCreationStateCode] = None
    message: Optional[String] = None


class DomainEntryOptions(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class DownloadDefaultKeyPairResult(BaseModel):
    createdAt: Optional[IsoDate] = None
    privateKeyBase64: Optional[Base64] = None
    publicKeyBase64: Optional[Base64] = None


class EndpointRequest(BaseModel):
    containerName: String
    containerPort: Integer
    healthCheck: Optional[ContainerServiceHealthCheckConfig] = None


class Environment(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class EstimateByTime(BaseModel):
    currency: Optional[Currency] = None
    pricingUnit: Optional[PricingUnit] = None
    timePeriod: Optional[TimePeriod] = None
    unit: Optional[Double] = None
    usageCost: Optional[Double] = None


class EstimatesByTime(RootModel[List[EstimateByTime]]):
    root: List[EstimateByTime]


class ExportSnapshotRequest(BaseModel):
    sourceSnapshotName: ResourceName


class GetActiveNamesRequest(BaseModel):
    pageToken: Optional[String] = None


class GetAlarmsRequest(BaseModel):
    alarmName: Optional[ResourceName] = None
    monitoredResourceName: Optional[ResourceName] = None
    pageToken: Optional[String] = None


class GetAutoSnapshotsRequest(BaseModel):
    resourceName: ResourceName


class GetAutoSnapshotsResult(BaseModel):
    autoSnapshots: Optional[AutoSnapshotDetailsList] = None
    resourceName: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None


class GetBlueprintsRequest(BaseModel):
    appCategory: Optional[AppCategory] = None
    includeInactive: Optional[Boolean] = None
    pageToken: Optional[String] = None


class GetBlueprintsResult(BaseModel):
    blueprints: Optional[BlueprintList] = None
    nextPageToken: Optional[String] = None


class GetBucketBundlesRequest(BaseModel):
    includeInactive: Optional[Boolean] = None


class GetBucketBundlesResult(BaseModel):
    bundles: Optional[BucketBundleList] = None


class GetBucketMetricDataRequest(BaseModel):
    bucketName: BucketName
    endTime: IsoDate
    metricName: BucketMetricName
    period: MetricPeriod
    startTime: IsoDate
    statistics: MetricStatisticList
    unit: MetricUnit


class GetBucketsRequest(BaseModel):
    bucketName: Optional[BucketName] = None
    includeConnectedResources: Optional[Boolean] = None
    pageToken: Optional[String] = None


class GetBundlesRequest(BaseModel):
    appCategory: Optional[AppCategory] = None
    includeInactive: Optional[Boolean] = None
    pageToken: Optional[String] = None


class GetBundlesResult(BaseModel):
    bundles: Optional[BundleList] = None
    nextPageToken: Optional[String] = None


class GetCertificatesRequest(BaseModel):
    certificateName: Optional[CertificateName] = None
    certificateStatuses: Optional[CertificateStatusList] = None
    includeCertificateDetails: Optional[IncludeCertificateDetails] = None


class GetCloudFormationStackRecordsRequest(BaseModel):
    pageToken: Optional[String] = None


class GetContainerAPIMetadataResult(BaseModel):
    metadata: Optional[ContainerServiceMetadataEntryList] = None


class GetContainerImagesResult(BaseModel):
    containerImages: Optional[ContainerImageList] = None


class GetContainerLogRequest(BaseModel):
    containerName: String
    endTime: Optional[IsoDate] = None
    filterPattern: Optional[String] = None
    pageToken: Optional[String] = None
    serviceName: ContainerServiceName
    startTime: Optional[IsoDate] = None


class GetContainerLogResult(BaseModel):
    logEvents: Optional[ContainerServiceLogEventList] = None
    nextPageToken: Optional[String] = None


class GetContainerServiceMetricDataRequest(BaseModel):
    endTime: IsoDate
    metricName: ContainerServiceMetricName
    period: MetricPeriod
    serviceName: ContainerServiceName
    startTime: IsoDate
    statistics: MetricStatisticList


class GetContainerServicePowersResult(BaseModel):
    powers: Optional[ContainerServicePowerList] = None


class GetCostEstimateRequest(BaseModel):
    endTime: IsoDate
    resourceName: ResourceName
    startTime: IsoDate


class GetDiskRequest(BaseModel):
    diskName: ResourceName


class GetDiskSnapshotRequest(BaseModel):
    diskSnapshotName: ResourceName


class GetDiskSnapshotsRequest(BaseModel):
    pageToken: Optional[String] = None


class GetDisksRequest(BaseModel):
    pageToken: Optional[String] = None


class GetDistributionBundlesResult(BaseModel):
    bundles: Optional[DistributionBundleList] = None


class GetDistributionLatestCacheResetRequest(BaseModel):
    distributionName: Optional[ResourceName] = None


class GetDistributionLatestCacheResetResult(BaseModel):
    createTime: Optional[IsoDate] = None
    status: Optional[String] = None


class GetDistributionMetricDataRequest(BaseModel):
    distributionName: ResourceName
    endTime: Timestamp
    metricName: DistributionMetricName
    period: MetricPeriod
    startTime: Timestamp
    statistics: MetricStatisticList
    unit: MetricUnit


class GetDistributionsRequest(BaseModel):
    distributionName: Optional[ResourceName] = None
    pageToken: Optional[String] = None


class GetDomainsRequest(BaseModel):
    pageToken: Optional[String] = None


class GetExportSnapshotRecordsRequest(BaseModel):
    pageToken: Optional[String] = None


class GetInstanceAccessDetailsRequest(BaseModel):
    instanceName: ResourceName
    protocol: Optional[InstanceAccessProtocol] = None


class GetInstanceMetricDataRequest(BaseModel):
    endTime: Timestamp
    instanceName: ResourceName
    metricName: InstanceMetricName
    period: MetricPeriod
    startTime: Timestamp
    statistics: MetricStatisticList
    unit: MetricUnit


class GetInstancePortStatesRequest(BaseModel):
    instanceName: ResourceName


class GetInstanceRequest(BaseModel):
    instanceName: ResourceName


class GetInstanceSnapshotRequest(BaseModel):
    instanceSnapshotName: ResourceName


class GetInstanceSnapshotsRequest(BaseModel):
    pageToken: Optional[String] = None


class GetInstanceStateRequest(BaseModel):
    instanceName: ResourceName


class GetInstancesRequest(BaseModel):
    pageToken: Optional[String] = None


class GetKeyPairRequest(BaseModel):
    keyPairName: ResourceName


class GetKeyPairsRequest(BaseModel):
    includeDefaultKeyPair: Optional[Boolean] = None
    pageToken: Optional[String] = None


class GetLoadBalancerMetricDataRequest(BaseModel):
    endTime: Timestamp
    loadBalancerName: ResourceName
    metricName: LoadBalancerMetricName
    period: MetricPeriod
    startTime: Timestamp
    statistics: MetricStatisticList
    unit: MetricUnit


class GetLoadBalancerRequest(BaseModel):
    loadBalancerName: ResourceName


class GetLoadBalancerTlsCertificatesRequest(BaseModel):
    loadBalancerName: ResourceName


class GetLoadBalancerTlsPoliciesRequest(BaseModel):
    pageToken: Optional[String] = None


class GetLoadBalancersRequest(BaseModel):
    pageToken: Optional[String] = None


class GetOperationRequest(BaseModel):
    operationId: NonEmptyString


class GetOperationsForResourceRequest(BaseModel):
    pageToken: Optional[String] = None
    resourceName: ResourceName


class GetOperationsRequest(BaseModel):
    pageToken: Optional[String] = None


class GetRegionsRequest(BaseModel):
    includeAvailabilityZones: Optional[Boolean] = None
    includeRelationalDatabaseAvailabilityZones: Optional[Boolean] = None


class GetRelationalDatabaseBlueprintsRequest(BaseModel):
    pageToken: Optional[String] = None


class GetRelationalDatabaseBundlesRequest(BaseModel):
    includeInactive: Optional[Boolean] = None
    pageToken: Optional[String] = None


class GetRelationalDatabaseEventsRequest(BaseModel):
    durationInMinutes: Optional[Integer] = None
    pageToken: Optional[String] = None
    relationalDatabaseName: ResourceName


class GetRelationalDatabaseLogEventsRequest(BaseModel):
    endTime: Optional[IsoDate] = None
    logStreamName: String
    pageToken: Optional[String] = None
    relationalDatabaseName: ResourceName
    startFromHead: Optional[Boolean] = None
    startTime: Optional[IsoDate] = None


class GetRelationalDatabaseLogStreamsRequest(BaseModel):
    relationalDatabaseName: ResourceName


class GetRelationalDatabaseMasterUserPasswordRequest(BaseModel):
    passwordVersion: Optional[RelationalDatabasePasswordVersion] = None
    relationalDatabaseName: ResourceName


class GetRelationalDatabaseMasterUserPasswordResult(BaseModel):
    createdAt: Optional[IsoDate] = None
    masterUserPassword: Optional[SensitiveString] = None


class GetRelationalDatabaseMetricDataRequest(BaseModel):
    endTime: IsoDate
    metricName: RelationalDatabaseMetricName
    period: MetricPeriod
    relationalDatabaseName: ResourceName
    startTime: IsoDate
    statistics: MetricStatisticList
    unit: MetricUnit


class GetRelationalDatabaseParametersRequest(BaseModel):
    pageToken: Optional[String] = None
    relationalDatabaseName: ResourceName


class GetRelationalDatabaseRequest(BaseModel):
    relationalDatabaseName: ResourceName


class GetRelationalDatabaseSnapshotRequest(BaseModel):
    relationalDatabaseSnapshotName: ResourceName


class GetRelationalDatabaseSnapshotsRequest(BaseModel):
    pageToken: Optional[String] = None


class GetRelationalDatabasesRequest(BaseModel):
    pageToken: Optional[String] = None


class GetStaticIpRequest(BaseModel):
    staticIpName: ResourceName


class GetStaticIpsRequest(BaseModel):
    pageToken: Optional[String] = None


class HostKeyAttributes(BaseModel):
    algorithm: Optional[String] = None
    fingerprintSHA1: Optional[String] = None
    fingerprintSHA256: Optional[String] = None
    notValidAfter: Optional[IsoDate] = None
    notValidBefore: Optional[IsoDate] = None
    publicKey: Optional[String] = None
    witnessedAt: Optional[IsoDate] = None


class HostKeysList(RootModel[List[HostKeyAttributes]]):
    root: List[HostKeyAttributes]


class ImportKeyPairRequest(BaseModel):
    keyPairName: ResourceName
    publicKeyBase64: Base64


class InputOrigin(BaseModel):
    name: Optional[ResourceName] = None
    protocolPolicy: Optional[OriginProtocolPolicyEnum] = None
    regionName: Optional[RegionName] = None


class InstanceEntry(BaseModel):
    availabilityZone: String
    instanceType: NonEmptyString
    portInfoSource: PortInfoSourceType
    sourceName: ResourceName
    userData: Optional[String] = None


class InstanceEntryList(RootModel[List[InstanceEntry]]):
    root: List[InstanceEntry]


class InstanceHealthSummary(BaseModel):
    instanceHealth: Optional[InstanceHealthState] = None
    instanceHealthReason: Optional[InstanceHealthReason] = None
    instanceName: Optional[ResourceName] = None


class InstanceHealthSummaryList(RootModel[List[InstanceHealthSummary]]):
    root: List[InstanceHealthSummary]


class InstanceMetadataOptions(BaseModel):
    httpEndpoint: Optional[HttpEndpoint] = None
    httpProtocolIpv6: Optional[HttpProtocolIpv6] = None
    httpPutResponseHopLimit: Optional[Integer] = None
    httpTokens: Optional[HttpTokens] = None
    state: Optional[InstanceMetadataState] = None


class InstanceSnapshotInfo(BaseModel):
    fromBlueprintId: Optional[NonEmptyString] = None
    fromBundleId: Optional[NonEmptyString] = None
    fromDiskInfo: Optional[DiskInfoList] = None


class InstanceState(BaseModel):
    code: Optional[Integer] = None
    name: Optional[String] = None


class IsVpcPeeredResult(BaseModel):
    isPeered: Optional[Boolean] = None


class LoadBalancerConfigurationOptions(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class LoadBalancerTlsCertificateDnsRecordCreationState(BaseModel):
    code: Optional[LoadBalancerTlsCertificateDnsRecordCreationStateCode] = None
    message: Optional[String] = None


class LoadBalancerTlsCertificateDomainValidationRecord(BaseModel):
    dnsRecordCreationState: Optional[
        LoadBalancerTlsCertificateDnsRecordCreationState
    ] = None
    domainName: Optional[DomainName] = None
    name: Optional[NonEmptyString] = None
    type: Optional[NonEmptyString] = None
    validationStatus: Optional[LoadBalancerTlsCertificateDomainStatus] = None
    value: Optional[NonEmptyString] = None


class LoadBalancerTlsCertificateDomainValidationRecordList(
    RootModel[List[LoadBalancerTlsCertificateDomainValidationRecord]]
):
    root: List[LoadBalancerTlsCertificateDomainValidationRecord]


class LoadBalancerTlsCertificateSummary(BaseModel):
    isAttached: Optional[Boolean] = None
    name: Optional[ResourceName] = None


class LoadBalancerTlsCertificateSummaryList(
    RootModel[List[LoadBalancerTlsCertificateSummary]]
):
    root: List[LoadBalancerTlsCertificateSummary]


class LogEvent(BaseModel):
    createdAt: Optional[IsoDate] = None
    message: Optional[String] = None


class LogEventList(RootModel[List[LogEvent]]):
    root: List[LogEvent]


class MetricDatapoint(BaseModel):
    average: Optional[Double] = None
    maximum: Optional[Double] = None
    minimum: Optional[Double] = None
    sampleCount: Optional[Double] = None
    sum: Optional[Double] = None
    timestamp: Optional[Timestamp] = None
    unit: Optional[MetricUnit] = None


class MetricDatapointList(RootModel[List[MetricDatapoint]]):
    root: List[MetricDatapoint]


class MonitoredResourceInfo(BaseModel):
    arn: Optional[ResourceArn] = None
    name: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None


class MonthlyTransfer(BaseModel):
    gbPerMonthAllocated: Optional[Integer] = None


class NameServersUpdateState(BaseModel):
    code: Optional[NameServersUpdateStateCode] = None
    message: Optional[String] = None


class Origin(BaseModel):
    name: Optional[ResourceName] = None
    protocolPolicy: Optional[OriginProtocolPolicyEnum] = None
    regionName: Optional[RegionName] = None
    resourceType: Optional[ResourceType] = None


class PasswordData(BaseModel):
    ciphertext: Optional[String] = None
    keyPairName: Optional[ResourceName] = None


class PendingModifiedRelationalDatabaseValues(BaseModel):
    backupRetentionEnabled: Optional[Boolean] = None
    engineVersion: Optional[String] = None
    masterUserPassword: Optional[String] = None


class PrivateRegistryAccess(BaseModel):
    ecrImagePullerRole: Optional[ContainerServiceECRImagePullerRole] = None


class PrivateRegistryAccessRequest(BaseModel):
    ecrImagePullerRole: Optional[ContainerServiceECRImagePullerRoleRequest] = None


class PutAlarmRequest(BaseModel):
    alarmName: ResourceName
    comparisonOperator: ComparisonOperator
    contactProtocols: Optional[ContactProtocolsList] = None
    datapointsToAlarm: Optional[Integer] = None
    evaluationPeriods: Integer
    metricName: MetricName
    monitoredResourceName: ResourceName
    notificationEnabled: Optional[Boolean] = None
    notificationTriggers: Optional[NotificationTriggerList] = None
    threshold: Double
    treatMissingData: Optional[TreatMissingData] = None


class R53HostedZoneDeletionState(BaseModel):
    code: Optional[R53HostedZoneDeletionStateCode] = None
    message: Optional[String] = None


class RebootInstanceRequest(BaseModel):
    instanceName: ResourceName


class RebootRelationalDatabaseRequest(BaseModel):
    relationalDatabaseName: ResourceName


class Region(BaseModel):
    availabilityZones: Optional[AvailabilityZoneList] = None
    continentCode: Optional[String] = None
    description: Optional[String] = None
    displayName: Optional[String] = None
    name: Optional[RegionName] = None
    relationalDatabaseAvailabilityZones: Optional[AvailabilityZoneList] = None


class RegionList(RootModel[List[Region]]):
    root: List[Region]


class RegisterContainerImageRequest(BaseModel):
    digest: String
    label: ContainerLabel
    serviceName: ContainerServiceName


class RegisterContainerImageResult(BaseModel):
    containerImage: Optional[ContainerImage] = None


class RegisteredDomainDelegationInfo(BaseModel):
    nameServersUpdateState: Optional[NameServersUpdateState] = None
    r53HostedZoneDeletionState: Optional[R53HostedZoneDeletionState] = None


class RelationalDatabaseBlueprint(BaseModel):
    blueprintId: Optional[String] = None
    engine: Optional[RelationalDatabaseEngine] = None
    engineDescription: Optional[String] = None
    engineVersion: Optional[String] = None
    engineVersionDescription: Optional[String] = None
    isEngineDefault: Optional[Boolean] = None


class RelationalDatabaseBlueprintList(RootModel[List[RelationalDatabaseBlueprint]]):
    root: List[RelationalDatabaseBlueprint]


class RelationalDatabaseBundle(BaseModel):
    bundleId: Optional[String] = None
    cpuCount: Optional[Integer] = None
    diskSizeInGb: Optional[Integer] = None
    isActive: Optional[Boolean] = None
    isEncrypted: Optional[Boolean] = None
    name: Optional[String] = None
    price: Optional[Float] = None
    ramSizeInGb: Optional[Float] = None
    transferPerMonthInGb: Optional[Integer] = None


class RelationalDatabaseBundleList(RootModel[List[RelationalDatabaseBundle]]):
    root: List[RelationalDatabaseBundle]


class RelationalDatabaseEndpoint(BaseModel):
    address: Optional[NonEmptyString] = None
    port: Optional[Integer] = None


class RelationalDatabaseHardware(BaseModel):
    cpuCount: Optional[Integer] = None
    diskSizeInGb: Optional[Integer] = None
    ramSizeInGb: Optional[Float] = None


class RelationalDatabaseParameter(BaseModel):
    allowedValues: Optional[String] = None
    applyMethod: Optional[String] = None
    applyType: Optional[String] = None
    dataType: Optional[String] = None
    description: Optional[String] = None
    isModifiable: Optional[Boolean] = None
    parameterName: Optional[String] = None
    parameterValue: Optional[String] = None


class RelationalDatabaseParameterList(RootModel[List[RelationalDatabaseParameter]]):
    root: List[RelationalDatabaseParameter]


class ReleaseStaticIpRequest(BaseModel):
    staticIpName: ResourceName


class ResetDistributionCacheRequest(BaseModel):
    distributionName: Optional[ResourceName] = None


class ResourceLocation(BaseModel):
    availabilityZone: Optional[String] = None
    regionName: Optional[RegionName] = None


class ResourceRecord(BaseModel):
    name: Optional[String] = None
    type: Optional[String] = None
    value: Optional[String] = None


class Session(BaseModel):
    isPrimary: Optional[Boolean] = None
    name: Optional[NonEmptyString] = None
    url: Optional[SensitiveNonEmptyString] = None


class Sessions(RootModel[List[Session]]):
    root: List[Session]


class StaticIp(BaseModel):
    arn: Optional[NonEmptyString] = None
    attachedTo: Optional[ResourceName] = None
    createdAt: Optional[IsoDate] = None
    ipAddress: Optional[IpAddress] = None
    isAttached: Optional[Boolean] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None
    supportCode: Optional[String] = None


class StaticIpList(RootModel[List[StaticIp]]):
    root: List[StaticIp]


class StopInstanceOnIdleRequest(BaseModel):
    duration: Optional[String] = None
    threshold: Optional[String] = None


class StopInstanceRequest(BaseModel):
    force: Optional[Boolean] = None
    instanceName: ResourceName


class StringList(RootModel[List[String]]):
    root: List[String]


class Tag(BaseModel):
    key: Optional[TagKey] = None
    value: Optional[TagValue] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagResourceRequest(BaseModel):
    resourceArn: Optional[ResourceArn] = None
    resourceName: ResourceName
    tags: TagList


class UpdateBucketRequest(BaseModel):
    accessLogConfig: Optional[BucketAccessLogConfig] = None
    accessRules: Optional[AccessRules] = None
    bucketName: BucketName
    readonlyAccessAccounts: Optional[PartnerIdList] = None
    versioning: Optional[NonEmptyString] = None


class UpdateDistributionBundleRequest(BaseModel):
    bundleId: Optional[String] = None
    distributionName: Optional[ResourceName] = None


class UpdateInstanceMetadataOptionsRequest(BaseModel):
    httpEndpoint: Optional[HttpEndpoint] = None
    httpProtocolIpv6: Optional[HttpProtocolIpv6] = None
    httpPutResponseHopLimit: Optional[Integer] = None
    httpTokens: Optional[HttpTokens] = None
    instanceName: ResourceName


class UpdateRelationalDatabaseParametersRequest(BaseModel):
    parameters: RelationalDatabaseParameterList
    relationalDatabaseName: ResourceName


class UpdateRelationalDatabaseRequest(BaseModel):
    applyImmediately: Optional[Boolean] = None
    caCertificateIdentifier: Optional[String] = None
    disableBackupRetention: Optional[Boolean] = None
    enableBackupRetention: Optional[Boolean] = None
    masterUserPassword: Optional[SensitiveString] = None
    preferredBackupWindow: Optional[String] = None
    preferredMaintenanceWindow: Optional[String] = None
    publiclyAccessible: Optional[Boolean] = None
    relationalDatabaseName: ResourceName
    rotateMasterUserPassword: Optional[Boolean] = None


class AccessKey(BaseModel):
    accessKeyId: Optional[IAMAccessKeyId] = None
    createdAt: Optional[IsoDate] = None
    lastUsed: Optional[AccessKeyLastUsed] = None
    secretAccessKey: Optional[NonEmptyString] = None
    status: Optional[StatusType] = None


class AccessKeyList(RootModel[List[AccessKey]]):
    root: List[AccessKey]


class AddOnRequest(BaseModel):
    addOnType: AddOnType
    autoSnapshotAddOnRequest: Optional[AutoSnapshotAddOnRequest] = None
    stopInstanceOnIdleRequest: Optional[StopInstanceOnIdleRequest] = None


class AddOnRequestList(RootModel[List[AddOnRequest]]):
    root: List[AddOnRequest]


class Alarm(BaseModel):
    arn: Optional[NonEmptyString] = None
    comparisonOperator: Optional[ComparisonOperator] = None
    contactProtocols: Optional[ContactProtocolsList] = None
    createdAt: Optional[IsoDate] = None
    datapointsToAlarm: Optional[Integer] = None
    evaluationPeriods: Optional[Integer] = None
    location: Optional[ResourceLocation] = None
    metricName: Optional[MetricName] = None
    monitoredResourceInfo: Optional[MonitoredResourceInfo] = None
    name: Optional[ResourceName] = None
    notificationEnabled: Optional[Boolean] = None
    notificationTriggers: Optional[NotificationTriggerList] = None
    period: Optional[MetricPeriod] = None
    resourceType: Optional[ResourceType] = None
    state: Optional[AlarmState] = None
    statistic: Optional[MetricStatistic] = None
    supportCode: Optional[String] = None
    threshold: Optional[Double] = None
    treatMissingData: Optional[TreatMissingData] = None
    unit: Optional[MetricUnit] = None


class AlarmsList(RootModel[List[Alarm]]):
    root: List[Alarm]


class AttachedDiskMap(RootModel[Optional[Dict[str, DiskMapList]]]):
    root: Optional[Dict[str, DiskMapList]] = None


class Bucket(BaseModel):
    ableToUpdateBundle: Optional[Boolean] = None
    accessLogConfig: Optional[BucketAccessLogConfig] = None
    accessRules: Optional[AccessRules] = None
    arn: Optional[NonEmptyString] = None
    bundleId: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    location: Optional[ResourceLocation] = None
    name: Optional[BucketName] = None
    objectVersioning: Optional[NonEmptyString] = None
    readonlyAccessAccounts: Optional[PartnerIdList] = None
    resourceType: Optional[NonEmptyString] = None
    resourcesReceivingAccess: Optional[AccessReceiverList] = None
    state: Optional[BucketState] = None
    supportCode: Optional[NonEmptyString] = None
    tags: Optional[TagList] = None
    url: Optional[NonEmptyString] = None


class BucketList(RootModel[List[Bucket]]):
    root: List[Bucket]


class CacheBehaviorList(RootModel[List[CacheBehaviorPerPath]]):
    root: List[CacheBehaviorPerPath]


class CloudFormationStackRecord(BaseModel):
    arn: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    destinationInfo: Optional[DestinationInfo] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None
    sourceInfo: Optional[CloudFormationStackRecordSourceInfoList] = None
    state: Optional[RecordState] = None


class CloudFormationStackRecordList(RootModel[List[CloudFormationStackRecord]]):
    root: List[CloudFormationStackRecord]


class ContactMethod(BaseModel):
    arn: Optional[NonEmptyString] = None
    contactEndpoint: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    protocol: Optional[ContactProtocol] = None
    resourceType: Optional[ResourceType] = None
    status: Optional[ContactMethodStatus] = None
    supportCode: Optional[String] = None


class ContactMethodsList(RootModel[List[ContactMethod]]):
    root: List[ContactMethod]


class Container(BaseModel):
    command: Optional[StringList] = None
    environment: Optional[Environment] = None
    image: Optional[String] = None
    ports: Optional[PortMap] = None


class ContainerMap(RootModel[Optional[Dict[str, Container]]]):
    root: Optional[Dict[str, Container]] = None


class ContainerServiceDeploymentRequest(BaseModel):
    containers: Optional[ContainerMap] = None
    publicEndpoint: Optional[EndpointRequest] = None


class ContainerServiceEndpoint(BaseModel):
    containerName: Optional[String] = None
    containerPort: Optional[Integer] = None
    healthCheck: Optional[ContainerServiceHealthCheckConfig] = None


class ContainerServicePublicDomains(
    RootModel[Optional[Dict[str, ContainerServicePublicDomainsList]]]
):
    root: Optional[Dict[str, ContainerServicePublicDomainsList]] = None


class CookieObject(BaseModel):
    cookiesAllowList: Optional[StringList] = None
    option: Optional[ForwardValues] = None


class CostEstimate(BaseModel):
    resultsByTime: Optional[EstimatesByTime] = None
    usageType: Optional[NonEmptyString] = None


class CostEstimates(RootModel[List[CostEstimate]]):
    root: List[CostEstimate]


class CreateBucketRequest(BaseModel):
    bucketName: BucketName
    bundleId: NonEmptyString
    enableObjectVersioning: Optional[Boolean] = None
    tags: Optional[TagList] = None


class CreateCertificateRequest(BaseModel):
    certificateName: CertificateName
    domainName: DomainName
    subjectAlternativeNames: Optional[SubjectAlternativeNameList] = None
    tags: Optional[TagList] = None


class CreateCloudFormationStackRequest(BaseModel):
    instances: InstanceEntryList


class CreateContainerServiceDeploymentRequest(BaseModel):
    containers: Optional[ContainerMap] = None
    publicEndpoint: Optional[EndpointRequest] = None
    serviceName: ContainerServiceName


class CreateContainerServiceRequest(BaseModel):
    deployment: Optional[ContainerServiceDeploymentRequest] = None
    power: ContainerServicePowerName
    privateRegistryAccess: Optional[PrivateRegistryAccessRequest] = None
    publicDomainNames: Optional[ContainerServicePublicDomains] = None
    scale: ContainerServiceScale
    serviceName: ContainerServiceName
    tags: Optional[TagList] = None


class CreateDiskFromSnapshotRequest(BaseModel):
    addOns: Optional[AddOnRequestList] = None
    availabilityZone: NonEmptyString
    diskName: ResourceName
    diskSnapshotName: Optional[ResourceName] = None
    restoreDate: Optional[String] = None
    sizeInGb: Integer
    sourceDiskName: Optional[String] = None
    tags: Optional[TagList] = None
    useLatestRestorableAutoSnapshot: Optional[Boolean] = None


class CreateDiskRequest(BaseModel):
    addOns: Optional[AddOnRequestList] = None
    availabilityZone: NonEmptyString
    diskName: ResourceName
    sizeInGb: Integer
    tags: Optional[TagList] = None


class CreateDiskSnapshotRequest(BaseModel):
    diskName: Optional[ResourceName] = None
    diskSnapshotName: ResourceName
    instanceName: Optional[ResourceName] = None
    tags: Optional[TagList] = None


class CreateDomainRequest(BaseModel):
    domainName: DomainName
    tags: Optional[TagList] = None


class CreateGUISessionAccessDetailsResult(BaseModel):
    failureReason: Optional[String] = None
    percentageComplete: Optional[Integer] = None
    resourceName: Optional[ResourceName] = None
    sessions: Optional[Sessions] = None
    status: Optional[Status] = None


class CreateInstanceSnapshotRequest(BaseModel):
    instanceName: ResourceName
    instanceSnapshotName: ResourceName
    tags: Optional[TagList] = None


class CreateInstancesFromSnapshotRequest(BaseModel):
    addOns: Optional[AddOnRequestList] = None
    attachedDiskMapping: Optional[AttachedDiskMap] = None
    availabilityZone: String
    bundleId: NonEmptyString
    instanceNames: StringList
    instanceSnapshotName: Optional[ResourceName] = None
    ipAddressType: Optional[IpAddressType] = None
    keyPairName: Optional[ResourceName] = None
    restoreDate: Optional[String] = None
    sourceInstanceName: Optional[String] = None
    tags: Optional[TagList] = None
    useLatestRestorableAutoSnapshot: Optional[Boolean] = None
    userData: Optional[String] = None


class CreateInstancesRequest(BaseModel):
    addOns: Optional[AddOnRequestList] = None
    availabilityZone: String
    blueprintId: NonEmptyString
    bundleId: NonEmptyString
    customImageName: Optional[ResourceName] = None
    instanceNames: StringList
    ipAddressType: Optional[IpAddressType] = None
    keyPairName: Optional[ResourceName] = None
    tags: Optional[TagList] = None
    userData: Optional[String] = None


class CreateKeyPairRequest(BaseModel):
    keyPairName: ResourceName
    tags: Optional[TagList] = None


class CreateLoadBalancerRequest(BaseModel):
    certificateAlternativeNames: Optional[DomainNameList] = None
    certificateDomainName: Optional[DomainName] = None
    certificateName: Optional[ResourceName] = None
    healthCheckPath: Optional[String] = None
    instancePort: Port
    ipAddressType: Optional[IpAddressType] = None
    loadBalancerName: ResourceName
    tags: Optional[TagList] = None
    tlsPolicyName: Optional[String] = None


class CreateLoadBalancerTlsCertificateRequest(BaseModel):
    certificateAlternativeNames: Optional[DomainNameList] = None
    certificateDomainName: DomainName
    certificateName: ResourceName
    loadBalancerName: ResourceName
    tags: Optional[TagList] = None


class CreateRelationalDatabaseFromSnapshotRequest(BaseModel):
    availabilityZone: Optional[String] = None
    publiclyAccessible: Optional[Boolean] = None
    relationalDatabaseBundleId: Optional[String] = None
    relationalDatabaseName: ResourceName
    relationalDatabaseSnapshotName: Optional[ResourceName] = None
    restoreTime: Optional[IsoDate] = None
    sourceRelationalDatabaseName: Optional[ResourceName] = None
    tags: Optional[TagList] = None
    useLatestRestorableTime: Optional[Boolean] = None


class CreateRelationalDatabaseRequest(BaseModel):
    availabilityZone: Optional[String] = None
    masterDatabaseName: String
    masterUserPassword: Optional[SensitiveString] = None
    masterUsername: String
    preferredBackupWindow: Optional[String] = None
    preferredMaintenanceWindow: Optional[String] = None
    publiclyAccessible: Optional[Boolean] = None
    relationalDatabaseBlueprintId: String
    relationalDatabaseBundleId: String
    relationalDatabaseName: ResourceName
    tags: Optional[TagList] = None


class CreateRelationalDatabaseSnapshotRequest(BaseModel):
    relationalDatabaseName: ResourceName
    relationalDatabaseSnapshotName: ResourceName
    tags: Optional[TagList] = None


class Disk(BaseModel):
    addOns: Optional[AddOnList] = None
    arn: Optional[NonEmptyString] = None
    attachedTo: Optional[ResourceName] = None
    attachmentState: Optional[String] = None
    autoMountStatus: Optional[AutoMountStatus] = None
    createdAt: Optional[IsoDate] = None
    gbInUse: Optional[Integer] = None
    iops: Optional[Integer] = None
    isAttached: Optional[Boolean] = None
    isSystemDisk: Optional[Boolean] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    path: Optional[String] = None
    resourceType: Optional[ResourceType] = None
    sizeInGb: Optional[Integer] = None
    state: Optional[DiskState] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None


class DiskList(RootModel[List[Disk]]):
    root: List[Disk]


class DiskSnapshot(BaseModel):
    arn: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    fromDiskArn: Optional[NonEmptyString] = None
    fromDiskName: Optional[ResourceName] = None
    fromInstanceArn: Optional[NonEmptyString] = None
    fromInstanceName: Optional[ResourceName] = None
    isFromAutoSnapshot: Optional[Boolean] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    progress: Optional[String] = None
    resourceType: Optional[ResourceType] = None
    sizeInGb: Optional[Integer] = None
    state: Optional[DiskSnapshotState] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None


class DiskSnapshotList(RootModel[List[DiskSnapshot]]):
    root: List[DiskSnapshot]


class DomainEntry(BaseModel):
    id: Optional[NonEmptyString] = None
    isAlias: Optional[Boolean] = None
    name: Optional[DomainName] = None
    options: Optional[DomainEntryOptions] = None
    target: Optional[String] = None
    type: Optional[DomainEntryType] = None


class DomainEntryList(RootModel[List[DomainEntry]]):
    root: List[DomainEntry]


class DomainValidationRecord(BaseModel):
    dnsRecordCreationState: Optional[DnsRecordCreationState] = None
    domainName: Optional[DomainName] = None
    resourceRecord: Optional[ResourceRecord] = None
    validationStatus: Optional[CertificateDomainValidationStatus] = None


class DomainValidationRecordList(RootModel[List[DomainValidationRecord]]):
    root: List[DomainValidationRecord]


class EnableAddOnRequest(BaseModel):
    addOnRequest: AddOnRequest
    resourceName: ResourceName


class ExportSnapshotRecordSourceInfo(BaseModel):
    arn: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    diskSnapshotInfo: Optional[DiskSnapshotInfo] = None
    fromResourceArn: Optional[NonEmptyString] = None
    fromResourceName: Optional[NonEmptyString] = None
    instanceSnapshotInfo: Optional[InstanceSnapshotInfo] = None
    name: Optional[NonEmptyString] = None
    resourceType: Optional[ExportSnapshotRecordSourceType] = None


class GetActiveNamesResult(BaseModel):
    activeNames: Optional[StringList] = None
    nextPageToken: Optional[String] = None


class GetAlarmsResult(BaseModel):
    alarms: Optional[AlarmsList] = None
    nextPageToken: Optional[String] = None


class GetBucketAccessKeysResult(BaseModel):
    accessKeys: Optional[AccessKeyList] = None


class GetBucketMetricDataResult(BaseModel):
    metricData: Optional[MetricDatapointList] = None
    metricName: Optional[BucketMetricName] = None


class GetBucketsResult(BaseModel):
    accountLevelBpaSync: Optional[AccountLevelBpaSync] = None
    buckets: Optional[BucketList] = None
    nextPageToken: Optional[String] = None


class GetCloudFormationStackRecordsResult(BaseModel):
    cloudFormationStackRecords: Optional[CloudFormationStackRecordList] = None
    nextPageToken: Optional[String] = None


class GetContactMethodsResult(BaseModel):
    contactMethods: Optional[ContactMethodsList] = None


class GetContainerServiceMetricDataResult(BaseModel):
    metricData: Optional[MetricDatapointList] = None
    metricName: Optional[ContainerServiceMetricName] = None


class GetDiskResult(BaseModel):
    disk: Optional[Disk] = None


class GetDiskSnapshotResult(BaseModel):
    diskSnapshot: Optional[DiskSnapshot] = None


class GetDiskSnapshotsResult(BaseModel):
    diskSnapshots: Optional[DiskSnapshotList] = None
    nextPageToken: Optional[String] = None


class GetDisksResult(BaseModel):
    disks: Optional[DiskList] = None
    nextPageToken: Optional[String] = None


class GetDistributionMetricDataResult(BaseModel):
    metricData: Optional[MetricDatapointList] = None
    metricName: Optional[DistributionMetricName] = None


class GetInstanceMetricDataResult(BaseModel):
    metricData: Optional[MetricDatapointList] = None
    metricName: Optional[InstanceMetricName] = None


class GetInstanceStateResult(BaseModel):
    state: Optional[InstanceState] = None


class GetLoadBalancerMetricDataResult(BaseModel):
    metricData: Optional[MetricDatapointList] = None
    metricName: Optional[LoadBalancerMetricName] = None


class GetRegionsResult(BaseModel):
    regions: Optional[RegionList] = None


class GetRelationalDatabaseBlueprintsResult(BaseModel):
    blueprints: Optional[RelationalDatabaseBlueprintList] = None
    nextPageToken: Optional[String] = None


class GetRelationalDatabaseBundlesResult(BaseModel):
    bundles: Optional[RelationalDatabaseBundleList] = None
    nextPageToken: Optional[String] = None


class GetRelationalDatabaseLogEventsResult(BaseModel):
    nextBackwardToken: Optional[String] = None
    nextForwardToken: Optional[String] = None
    resourceLogEvents: Optional[LogEventList] = None


class GetRelationalDatabaseLogStreamsResult(BaseModel):
    logStreams: Optional[StringList] = None


class GetRelationalDatabaseMetricDataResult(BaseModel):
    metricData: Optional[MetricDatapointList] = None
    metricName: Optional[RelationalDatabaseMetricName] = None


class GetRelationalDatabaseParametersResult(BaseModel):
    nextPageToken: Optional[String] = None
    parameters: Optional[RelationalDatabaseParameterList] = None


class GetStaticIpResult(BaseModel):
    staticIp: Optional[StaticIp] = None


class GetStaticIpsResult(BaseModel):
    nextPageToken: Optional[String] = None
    staticIps: Optional[StaticIpList] = None


class InstanceAccessDetails(BaseModel):
    certKey: Optional[String] = None
    expiresAt: Optional[IsoDate] = None
    hostKeys: Optional[HostKeysList] = None
    instanceName: Optional[ResourceName] = None
    ipAddress: Optional[IpAddress] = None
    password: Optional[String] = None
    passwordData: Optional[PasswordData] = None
    privateKey: Optional[String] = None
    protocol: Optional[InstanceAccessProtocol] = None
    username: Optional[String] = None


class InstanceHardware(BaseModel):
    cpuCount: Optional[Integer] = None
    disks: Optional[DiskList] = None
    ramSizeInGb: Optional[Float] = None


class InstancePortInfo(BaseModel):
    accessDirection: Optional[AccessDirection] = None
    accessFrom: Optional[String] = None
    accessType: Optional[PortAccessType] = None
    cidrListAliases: Optional[StringList] = None
    cidrs: Optional[StringList] = None
    commonName: Optional[String] = None
    fromPort: Optional[Port] = None
    ipv6Cidrs: Optional[StringList] = None
    protocol: Optional[NetworkProtocol] = None
    toPort: Optional[Port] = None


class InstancePortInfoList(RootModel[List[InstancePortInfo]]):
    root: List[InstancePortInfo]


class InstancePortState(BaseModel):
    cidrListAliases: Optional[StringList] = None
    cidrs: Optional[StringList] = None
    fromPort: Optional[Port] = None
    ipv6Cidrs: Optional[StringList] = None
    protocol: Optional[NetworkProtocol] = None
    state: Optional[PortState] = None
    toPort: Optional[Port] = None


class InstancePortStateList(RootModel[List[InstancePortState]]):
    root: List[InstancePortState]


class InstanceSnapshot(BaseModel):
    arn: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    fromAttachedDisks: Optional[DiskList] = None
    fromBlueprintId: Optional[String] = None
    fromBundleId: Optional[String] = None
    fromInstanceArn: Optional[NonEmptyString] = None
    fromInstanceName: Optional[ResourceName] = None
    isFromAutoSnapshot: Optional[Boolean] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    progress: Optional[String] = None
    resourceType: Optional[ResourceType] = None
    sizeInGb: Optional[Integer] = None
    state: Optional[InstanceSnapshotState] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None


class InstanceSnapshotList(RootModel[List[InstanceSnapshot]]):
    root: List[InstanceSnapshot]


class KeyPair(BaseModel):
    arn: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    fingerprint: Optional[Base64] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None


class KeyPairList(RootModel[List[KeyPair]]):
    root: List[KeyPair]


class LoadBalancer(BaseModel):
    arn: Optional[NonEmptyString] = None
    configurationOptions: Optional[LoadBalancerConfigurationOptions] = None
    createdAt: Optional[IsoDate] = None
    dnsName: Optional[NonEmptyString] = None
    healthCheckPath: Optional[NonEmptyString] = None
    httpsRedirectionEnabled: Optional[Boolean] = None
    instanceHealthSummary: Optional[InstanceHealthSummaryList] = None
    instancePort: Optional[Integer] = None
    ipAddressType: Optional[IpAddressType] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    protocol: Optional[LoadBalancerProtocol] = None
    publicPorts: Optional[PortList] = None
    resourceType: Optional[ResourceType] = None
    state: Optional[LoadBalancerState] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None
    tlsCertificateSummaries: Optional[LoadBalancerTlsCertificateSummaryList] = None
    tlsPolicyName: Optional[ResourceName] = None


class LoadBalancerList(RootModel[List[LoadBalancer]]):
    root: List[LoadBalancer]


class LoadBalancerTlsCertificate(BaseModel):
    arn: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    domainName: Optional[DomainName] = None
    domainValidationRecords: Optional[
        LoadBalancerTlsCertificateDomainValidationRecordList
    ] = None
    failureReason: Optional[LoadBalancerTlsCertificateFailureReason] = None
    isAttached: Optional[Boolean] = None
    issuedAt: Optional[IsoDate] = None
    issuer: Optional[NonEmptyString] = None
    keyAlgorithm: Optional[NonEmptyString] = None
    loadBalancerName: Optional[ResourceName] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    notAfter: Optional[IsoDate] = None
    notBefore: Optional[IsoDate] = None
    renewalSummary: Optional[LoadBalancerTlsCertificateRenewalSummary] = None
    resourceType: Optional[ResourceType] = None
    revocationReason: Optional[LoadBalancerTlsCertificateRevocationReason] = None
    revokedAt: Optional[IsoDate] = None
    serial: Optional[NonEmptyString] = None
    signatureAlgorithm: Optional[NonEmptyString] = None
    status: Optional[LoadBalancerTlsCertificateStatus] = None
    subject: Optional[NonEmptyString] = None
    subjectAlternativeNames: Optional[StringList] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None


class LoadBalancerTlsCertificateList(RootModel[List[LoadBalancerTlsCertificate]]):
    root: List[LoadBalancerTlsCertificate]


class LoadBalancerTlsPolicy(BaseModel):
    ciphers: Optional[StringList] = None
    description: Optional[String] = None
    isDefault: Optional[Boolean] = None
    name: Optional[ResourceName] = None
    protocols: Optional[StringList] = None


class LoadBalancerTlsPolicyList(RootModel[List[LoadBalancerTlsPolicy]]):
    root: List[LoadBalancerTlsPolicy]


class Operation(BaseModel):
    createdAt: Optional[IsoDate] = None
    errorCode: Optional[String] = None
    errorDetails: Optional[String] = None
    id: Optional[NonEmptyString] = None
    isTerminal: Optional[Boolean] = None
    location: Optional[ResourceLocation] = None
    operationDetails: Optional[String] = None
    operationType: Optional[OperationType] = None
    resourceName: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None
    status: Optional[OperationStatus] = None
    statusChangedAt: Optional[IsoDate] = None


class OperationList(RootModel[List[Operation]]):
    root: List[Operation]


class PeerVpcResult(BaseModel):
    operation: Optional[Operation] = None


class PortInfo(BaseModel):
    cidrListAliases: Optional[StringList] = None
    cidrs: Optional[StringList] = None
    fromPort: Optional[Port] = None
    ipv6Cidrs: Optional[StringList] = None
    protocol: Optional[NetworkProtocol] = None
    toPort: Optional[Port] = None


class PortInfoList(RootModel[List[PortInfo]]):
    root: List[PortInfo]


class PutAlarmResult(BaseModel):
    operations: Optional[OperationList] = None


class PutInstancePublicPortsRequest(BaseModel):
    instanceName: ResourceName
    portInfos: PortInfoList


class PutInstancePublicPortsResult(BaseModel):
    operation: Optional[Operation] = None


class QueryStringObject(BaseModel):
    option: Optional[Boolean] = None
    queryStringsAllowList: Optional[StringList] = None


class RebootInstanceResult(BaseModel):
    operations: Optional[OperationList] = None


class RebootRelationalDatabaseResult(BaseModel):
    operations: Optional[OperationList] = None


class RelationalDatabase(BaseModel):
    arn: Optional[NonEmptyString] = None
    backupRetentionEnabled: Optional[Boolean] = None
    caCertificateIdentifier: Optional[String] = None
    createdAt: Optional[IsoDate] = None
    engine: Optional[NonEmptyString] = None
    engineVersion: Optional[NonEmptyString] = None
    hardware: Optional[RelationalDatabaseHardware] = None
    latestRestorableTime: Optional[IsoDate] = None
    location: Optional[ResourceLocation] = None
    masterDatabaseName: Optional[String] = None
    masterEndpoint: Optional[RelationalDatabaseEndpoint] = None
    masterUsername: Optional[NonEmptyString] = None
    name: Optional[ResourceName] = None
    parameterApplyStatus: Optional[NonEmptyString] = None
    pendingMaintenanceActions: Optional[PendingMaintenanceActionList] = None
    pendingModifiedValues: Optional[PendingModifiedRelationalDatabaseValues] = None
    preferredBackupWindow: Optional[NonEmptyString] = None
    preferredMaintenanceWindow: Optional[NonEmptyString] = None
    publiclyAccessible: Optional[Boolean] = None
    relationalDatabaseBlueprintId: Optional[NonEmptyString] = None
    relationalDatabaseBundleId: Optional[NonEmptyString] = None
    resourceType: Optional[ResourceType] = None
    secondaryAvailabilityZone: Optional[String] = None
    state: Optional[NonEmptyString] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None


class RelationalDatabaseEvent(BaseModel):
    createdAt: Optional[IsoDate] = None
    eventCategories: Optional[StringList] = None
    message: Optional[String] = None
    resource: Optional[ResourceName] = None


class RelationalDatabaseEventList(RootModel[List[RelationalDatabaseEvent]]):
    root: List[RelationalDatabaseEvent]


class RelationalDatabaseList(RootModel[List[RelationalDatabase]]):
    root: List[RelationalDatabase]


class RelationalDatabaseSnapshot(BaseModel):
    arn: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    engine: Optional[NonEmptyString] = None
    engineVersion: Optional[NonEmptyString] = None
    fromRelationalDatabaseArn: Optional[NonEmptyString] = None
    fromRelationalDatabaseBlueprintId: Optional[String] = None
    fromRelationalDatabaseBundleId: Optional[String] = None
    fromRelationalDatabaseName: Optional[NonEmptyString] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None
    sizeInGb: Optional[Integer] = None
    state: Optional[NonEmptyString] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None


class RelationalDatabaseSnapshotList(RootModel[List[RelationalDatabaseSnapshot]]):
    root: List[RelationalDatabaseSnapshot]


class ReleaseStaticIpResult(BaseModel):
    operations: Optional[OperationList] = None


class RenewalSummary(BaseModel):
    domainValidationRecords: Optional[DomainValidationRecordList] = None
    renewalStatus: Optional[RenewalStatus] = None
    renewalStatusReason: Optional[RenewalStatusReason] = None
    updatedAt: Optional[IsoDate] = None


class ResetDistributionCacheResult(BaseModel):
    createTime: Optional[IsoDate] = None
    operation: Optional[Operation] = None
    status: Optional[String] = None


class ResourceBudgetEstimate(BaseModel):
    costEstimates: Optional[CostEstimates] = None
    endTime: Optional[IsoDate] = None
    resourceName: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None
    startTime: Optional[IsoDate] = None


class ResourcesBudgetEstimate(RootModel[List[ResourceBudgetEstimate]]):
    root: List[ResourceBudgetEstimate]


class SendContactMethodVerificationResult(BaseModel):
    operations: Optional[OperationList] = None


class SetIpAddressTypeResult(BaseModel):
    operations: Optional[OperationList] = None


class SetResourceAccessForBucketResult(BaseModel):
    operations: Optional[OperationList] = None


class StartGUISessionResult(BaseModel):
    operations: Optional[OperationList] = None


class StartInstanceResult(BaseModel):
    operations: Optional[OperationList] = None


class StartRelationalDatabaseResult(BaseModel):
    operations: Optional[OperationList] = None


class StopGUISessionResult(BaseModel):
    operations: Optional[OperationList] = None


class StopInstanceResult(BaseModel):
    operations: Optional[OperationList] = None


class StopRelationalDatabaseResult(BaseModel):
    operations: Optional[OperationList] = None


class TagResourceResult(BaseModel):
    operations: Optional[OperationList] = None


class TestAlarmResult(BaseModel):
    operations: Optional[OperationList] = None


class UnpeerVpcResult(BaseModel):
    operation: Optional[Operation] = None


class UntagResourceResult(BaseModel):
    operations: Optional[OperationList] = None


class UpdateBucketBundleResult(BaseModel):
    operations: Optional[OperationList] = None


class UpdateBucketResult(BaseModel):
    bucket: Optional[Bucket] = None
    operations: Optional[OperationList] = None


class UpdateContainerServiceRequest(BaseModel):
    isDisabled: Optional[Boolean] = None
    power: Optional[ContainerServicePowerName] = None
    privateRegistryAccess: Optional[PrivateRegistryAccessRequest] = None
    publicDomainNames: Optional[ContainerServicePublicDomains] = None
    scale: Optional[ContainerServiceScale] = None
    serviceName: ContainerServiceName


class UpdateDistributionBundleResult(BaseModel):
    operation: Optional[Operation] = None


class UpdateDistributionResult(BaseModel):
    operation: Optional[Operation] = None


class UpdateDomainEntryRequest(BaseModel):
    domainEntry: DomainEntry
    domainName: DomainName


class UpdateDomainEntryResult(BaseModel):
    operations: Optional[OperationList] = None


class UpdateInstanceMetadataOptionsResult(BaseModel):
    operation: Optional[Operation] = None


class UpdateLoadBalancerAttributeResult(BaseModel):
    operations: Optional[OperationList] = None


class UpdateRelationalDatabaseParametersResult(BaseModel):
    operations: Optional[OperationList] = None


class UpdateRelationalDatabaseResult(BaseModel):
    operations: Optional[OperationList] = None


class AllocateStaticIpResult(BaseModel):
    operations: Optional[OperationList] = None


class AttachCertificateToDistributionResult(BaseModel):
    operation: Optional[Operation] = None


class AttachDiskResult(BaseModel):
    operations: Optional[OperationList] = None


class AttachInstancesToLoadBalancerResult(BaseModel):
    operations: Optional[OperationList] = None


class AttachLoadBalancerTlsCertificateResult(BaseModel):
    operations: Optional[OperationList] = None


class AttachStaticIpResult(BaseModel):
    operations: Optional[OperationList] = None


class CacheSettings(BaseModel):
    allowedHTTPMethods: Optional[NonEmptyString] = None
    cachedHTTPMethods: Optional[NonEmptyString] = None
    defaultTTL: Optional[Long] = None
    forwardedCookies: Optional[CookieObject] = None
    forwardedHeaders: Optional[HeaderObject] = None
    forwardedQueryStrings: Optional[QueryStringObject] = None
    maximumTTL: Optional[Long] = None
    minimumTTL: Optional[Long] = None


class Certificate(BaseModel):
    arn: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    domainName: Optional[DomainName] = None
    domainValidationRecords: Optional[DomainValidationRecordList] = None
    eligibleToRenew: Optional[EligibleToRenew] = None
    inUseResourceCount: Optional[InUseResourceCount] = None
    issuedAt: Optional[IsoDate] = None
    issuerCA: Optional[IssuerCA] = None
    keyAlgorithm: Optional[KeyAlgorithm] = None
    name: Optional[CertificateName] = None
    notAfter: Optional[IsoDate] = None
    notBefore: Optional[IsoDate] = None
    renewalSummary: Optional[RenewalSummary] = None
    requestFailureReason: Optional[RequestFailureReason] = None
    revocationReason: Optional[RevocationReason] = None
    revokedAt: Optional[IsoDate] = None
    serialNumber: Optional[SerialNumber] = None
    status: Optional[CertificateStatus] = None
    subjectAlternativeNames: Optional[SubjectAlternativeNameList] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None


class CertificateSummary(BaseModel):
    certificateArn: Optional[NonEmptyString] = None
    certificateDetail: Optional[Certificate] = None
    certificateName: Optional[CertificateName] = None
    domainName: Optional[DomainName] = None
    tags: Optional[TagList] = None


class CertificateSummaryList(RootModel[List[CertificateSummary]]):
    root: List[CertificateSummary]


class CloseInstancePublicPortsRequest(BaseModel):
    instanceName: ResourceName
    portInfo: PortInfo


class CloseInstancePublicPortsResult(BaseModel):
    operation: Optional[Operation] = None


class ContainerServiceDeployment(BaseModel):
    containers: Optional[ContainerMap] = None
    createdAt: Optional[IsoDate] = None
    publicEndpoint: Optional[ContainerServiceEndpoint] = None
    state: Optional[ContainerServiceDeploymentState] = None
    version: Optional[Integer] = None


class ContainerServiceDeploymentList(RootModel[List[ContainerServiceDeployment]]):
    root: List[ContainerServiceDeployment]


class CopySnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateBucketAccessKeyResult(BaseModel):
    accessKey: Optional[AccessKey] = None
    operations: Optional[OperationList] = None


class CreateBucketResult(BaseModel):
    bucket: Optional[Bucket] = None
    operations: Optional[OperationList] = None


class CreateCertificateResult(BaseModel):
    certificate: Optional[CertificateSummary] = None
    operations: Optional[OperationList] = None


class CreateCloudFormationStackResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateContactMethodResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateDiskFromSnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateDiskResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateDiskSnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateDistributionRequest(BaseModel):
    bundleId: String
    cacheBehaviorSettings: Optional[CacheSettings] = None
    cacheBehaviors: Optional[CacheBehaviorList] = None
    defaultCacheBehavior: CacheBehavior
    distributionName: ResourceName
    ipAddressType: Optional[IpAddressType] = None
    origin: InputOrigin
    tags: Optional[TagList] = None


class CreateDomainEntryRequest(BaseModel):
    domainEntry: DomainEntry
    domainName: DomainName


class CreateDomainEntryResult(BaseModel):
    operation: Optional[Operation] = None


class CreateDomainResult(BaseModel):
    operation: Optional[Operation] = None


class CreateInstanceSnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateInstancesFromSnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateInstancesResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateKeyPairResult(BaseModel):
    keyPair: Optional[KeyPair] = None
    operation: Optional[Operation] = None
    privateKeyBase64: Optional[Base64] = None
    publicKeyBase64: Optional[Base64] = None


class CreateLoadBalancerResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateLoadBalancerTlsCertificateResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateRelationalDatabaseFromSnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateRelationalDatabaseResult(BaseModel):
    operations: Optional[OperationList] = None


class CreateRelationalDatabaseSnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteAlarmResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteAutoSnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteBucketAccessKeyResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteBucketResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteCertificateResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteContactMethodResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteDiskResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteDiskSnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteDistributionResult(BaseModel):
    operation: Optional[Operation] = None


class DeleteDomainEntryRequest(BaseModel):
    domainEntry: DomainEntry
    domainName: DomainName


class DeleteDomainEntryResult(BaseModel):
    operation: Optional[Operation] = None


class DeleteDomainResult(BaseModel):
    operation: Optional[Operation] = None


class DeleteInstanceResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteInstanceSnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteKeyPairResult(BaseModel):
    operation: Optional[Operation] = None


class DeleteKnownHostKeysResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteLoadBalancerResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteLoadBalancerTlsCertificateResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteRelationalDatabaseResult(BaseModel):
    operations: Optional[OperationList] = None


class DeleteRelationalDatabaseSnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class DetachCertificateFromDistributionResult(BaseModel):
    operation: Optional[Operation] = None


class DetachDiskResult(BaseModel):
    operations: Optional[OperationList] = None


class DetachInstancesFromLoadBalancerResult(BaseModel):
    operations: Optional[OperationList] = None


class DetachStaticIpResult(BaseModel):
    operations: Optional[OperationList] = None


class DisableAddOnResult(BaseModel):
    operations: Optional[OperationList] = None


class Domain(BaseModel):
    arn: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    domainEntries: Optional[DomainEntryList] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    registeredDomainDelegationInfo: Optional[RegisteredDomainDelegationInfo] = None
    resourceType: Optional[ResourceType] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None


class DomainList(RootModel[List[Domain]]):
    root: List[Domain]


class EnableAddOnResult(BaseModel):
    operations: Optional[OperationList] = None


class ExportSnapshotRecord(BaseModel):
    arn: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    destinationInfo: Optional[DestinationInfo] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    resourceType: Optional[ResourceType] = None
    sourceInfo: Optional[ExportSnapshotRecordSourceInfo] = None
    state: Optional[RecordState] = None


class ExportSnapshotRecordList(RootModel[List[ExportSnapshotRecord]]):
    root: List[ExportSnapshotRecord]


class ExportSnapshotResult(BaseModel):
    operations: Optional[OperationList] = None


class GetCertificatesResult(BaseModel):
    certificates: Optional[CertificateSummaryList] = None


class GetContainerServiceDeploymentsResult(BaseModel):
    deployments: Optional[ContainerServiceDeploymentList] = None


class GetCostEstimateResult(BaseModel):
    resourcesBudgetEstimate: Optional[ResourcesBudgetEstimate] = None


class GetDomainResult(BaseModel):
    domain: Optional[Domain] = None


class GetDomainsResult(BaseModel):
    domains: Optional[DomainList] = None
    nextPageToken: Optional[String] = None


class GetExportSnapshotRecordsResult(BaseModel):
    exportSnapshotRecords: Optional[ExportSnapshotRecordList] = None
    nextPageToken: Optional[String] = None


class GetInstanceAccessDetailsResult(BaseModel):
    accessDetails: Optional[InstanceAccessDetails] = None


class GetInstancePortStatesResult(BaseModel):
    portStates: Optional[InstancePortStateList] = None


class GetInstanceSnapshotResult(BaseModel):
    instanceSnapshot: Optional[InstanceSnapshot] = None


class GetInstanceSnapshotsResult(BaseModel):
    instanceSnapshots: Optional[InstanceSnapshotList] = None
    nextPageToken: Optional[String] = None


class GetKeyPairResult(BaseModel):
    keyPair: Optional[KeyPair] = None


class GetKeyPairsResult(BaseModel):
    keyPairs: Optional[KeyPairList] = None
    nextPageToken: Optional[String] = None


class GetLoadBalancerResult(BaseModel):
    loadBalancer: Optional[LoadBalancer] = None


class GetLoadBalancerTlsCertificatesResult(BaseModel):
    tlsCertificates: Optional[LoadBalancerTlsCertificateList] = None


class GetLoadBalancerTlsPoliciesResult(BaseModel):
    nextPageToken: Optional[String] = None
    tlsPolicies: Optional[LoadBalancerTlsPolicyList] = None


class GetLoadBalancersResult(BaseModel):
    loadBalancers: Optional[LoadBalancerList] = None
    nextPageToken: Optional[String] = None


class GetOperationResult(BaseModel):
    operation: Optional[Operation] = None


class GetOperationsForResourceResult(BaseModel):
    nextPageCount: Optional[String] = None
    nextPageToken: Optional[String] = None
    operations: Optional[OperationList] = None


class GetOperationsResult(BaseModel):
    nextPageToken: Optional[String] = None
    operations: Optional[OperationList] = None


class GetRelationalDatabaseEventsResult(BaseModel):
    nextPageToken: Optional[String] = None
    relationalDatabaseEvents: Optional[RelationalDatabaseEventList] = None


class GetRelationalDatabaseResult(BaseModel):
    relationalDatabase: Optional[RelationalDatabase] = None


class GetRelationalDatabaseSnapshotResult(BaseModel):
    relationalDatabaseSnapshot: Optional[RelationalDatabaseSnapshot] = None


class GetRelationalDatabaseSnapshotsResult(BaseModel):
    nextPageToken: Optional[String] = None
    relationalDatabaseSnapshots: Optional[RelationalDatabaseSnapshotList] = None


class GetRelationalDatabasesResult(BaseModel):
    nextPageToken: Optional[String] = None
    relationalDatabases: Optional[RelationalDatabaseList] = None


class ImportKeyPairResult(BaseModel):
    operation: Optional[Operation] = None


class InstanceNetworking(BaseModel):
    monthlyTransfer: Optional[MonthlyTransfer] = None
    ports: Optional[InstancePortInfoList] = None


class LightsailDistribution(BaseModel):
    ableToUpdateBundle: Optional[Boolean] = None
    alternativeDomainNames: Optional[StringList] = None
    arn: Optional[NonEmptyString] = None
    bundleId: Optional[String] = None
    cacheBehaviorSettings: Optional[CacheSettings] = None
    cacheBehaviors: Optional[CacheBehaviorList] = None
    certificateName: Optional[ResourceName] = None
    createdAt: Optional[IsoDate] = None
    defaultCacheBehavior: Optional[CacheBehavior] = None
    domainName: Optional[String] = None
    ipAddressType: Optional[IpAddressType] = None
    isEnabled: Optional[Boolean] = None
    location: Optional[ResourceLocation] = None
    name: Optional[ResourceName] = None
    origin: Optional[Origin] = None
    originPublicDNS: Optional[String] = None
    resourceType: Optional[ResourceType] = None
    status: Optional[String] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None


class OpenInstancePublicPortsRequest(BaseModel):
    instanceName: ResourceName
    portInfo: PortInfo


class OpenInstancePublicPortsResult(BaseModel):
    operation: Optional[Operation] = None


class UpdateDistributionRequest(BaseModel):
    cacheBehaviorSettings: Optional[CacheSettings] = None
    cacheBehaviors: Optional[CacheBehaviorList] = None
    defaultCacheBehavior: Optional[CacheBehavior] = None
    distributionName: ResourceName
    isEnabled: Optional[Boolean] = None
    origin: Optional[InputOrigin] = None


class ContainerService(BaseModel):
    arn: Optional[NonEmptyString] = None
    containerServiceName: Optional[ContainerServiceName] = None
    createdAt: Optional[IsoDate] = None
    currentDeployment: Optional[ContainerServiceDeployment] = None
    isDisabled: Optional[Boolean] = None
    location: Optional[ResourceLocation] = None
    nextDeployment: Optional[ContainerServiceDeployment] = None
    power: Optional[ContainerServicePowerName] = None
    powerId: Optional[String] = None
    principalArn: Optional[String] = None
    privateDomainName: Optional[String] = None
    privateRegistryAccess: Optional[PrivateRegistryAccess] = None
    publicDomainNames: Optional[ContainerServicePublicDomains] = None
    resourceType: Optional[ResourceType] = None
    scale: Optional[ContainerServiceScale] = None
    state: Optional[ContainerServiceState] = None
    stateDetail: Optional[ContainerServiceStateDetail] = None
    tags: Optional[TagList] = None
    url: Optional[String] = None


class ContainerServiceList(RootModel[List[ContainerService]]):
    root: List[ContainerService]


class ContainerServicesListResult(BaseModel):
    containerServices: Optional[ContainerServiceList] = None


class CreateContainerServiceDeploymentResult(BaseModel):
    containerService: Optional[ContainerService] = None


class CreateContainerServiceResult(BaseModel):
    containerService: Optional[ContainerService] = None


class CreateDistributionResult(BaseModel):
    distribution: Optional[LightsailDistribution] = None
    operation: Optional[Operation] = None


class DistributionList(RootModel[List[LightsailDistribution]]):
    root: List[LightsailDistribution]


class GetDistributionsResult(BaseModel):
    distributions: Optional[DistributionList] = None
    nextPageToken: Optional[String] = None


class Instance(BaseModel):
    addOns: Optional[AddOnList] = None
    arn: Optional[NonEmptyString] = None
    blueprintId: Optional[NonEmptyString] = None
    blueprintName: Optional[NonEmptyString] = None
    bundleId: Optional[NonEmptyString] = None
    createdAt: Optional[IsoDate] = None
    hardware: Optional[InstanceHardware] = None
    ipAddressType: Optional[IpAddressType] = None
    ipv6Addresses: Optional[Ipv6AddressList] = None
    isStaticIp: Optional[Boolean] = None
    location: Optional[ResourceLocation] = None
    metadataOptions: Optional[InstanceMetadataOptions] = None
    name: Optional[ResourceName] = None
    networking: Optional[InstanceNetworking] = None
    privateIpAddress: Optional[IpAddress] = None
    publicIpAddress: Optional[IpAddress] = None
    resourceType: Optional[ResourceType] = None
    sshKeyName: Optional[ResourceName] = None
    state: Optional[InstanceState] = None
    supportCode: Optional[String] = None
    tags: Optional[TagList] = None
    username: Optional[NonEmptyString] = None


class InstanceList(RootModel[List[Instance]]):
    root: List[Instance]


class UpdateContainerServiceResult(BaseModel):
    containerService: Optional[ContainerService] = None


class GetInstanceResult(BaseModel):
    instance: Optional[Instance] = None


class GetInstancesResult(BaseModel):
    instances: Optional[InstanceList] = None
    nextPageToken: Optional[String] = None
